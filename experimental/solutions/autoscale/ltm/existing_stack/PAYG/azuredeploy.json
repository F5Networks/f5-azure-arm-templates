{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json", 
    "contentVersion": "4.2.0.0", 
    "parameters": {
        "vmScaleSetMinCount": {
            "allowedValues": [
                1, 
                2, 
                3, 
                4, 
                5, 
                6
            ], 
            "defaultValue": 2, 
            "metadata": {
                "description": "The minimum (and default) number of BIG-IP VEs that will be deployed into the VM Scale Set."
            }, 
            "type": "int"
        }, 
        "vmScaleSetMaxCount": {
            "allowedValues": [
                2, 
                3, 
                4, 
                5, 
                6, 
                7, 
                8
            ], 
            "defaultValue": 4, 
            "metadata": {
                "description": "The maximum number of BIG-IP VEs that can be deployed into the VM Scale Set."
            }, 
            "type": "int"
        }, 
        "autoScaleMetric": {
            "allowedValues": [
                "TMM_CPU", 
                "TMM_Traffic", 
                "Host_Throughput"
            ], 
            "defaultValue": "Host_Throughput", 
            "metadata": {
                "description": "Select the metric you would like the auto scale events to be triggered on, the following parameters determine individual settings for the scaling rules based on the metric chosen. Note: Custom BIG-IP metrics will be sent to Application Insights regardless of metric selected, for use by additional autoscale rules or for device visibility."
            }, 
            "type": "string"
        }, 
        "appInsights": {
            "defaultValue": "CREATE_NEW", 
            "metadata": {
                "description": "Enter the name of your existing Application Insights environment that will be used to receive custom BIG-IP metrics that can be used for Scale Set rules and device visibility. If it is in a different Resource Group than this deployment, specify it as **app_insights_name;app_insights_rg**).  If you do not have an Application Insights environment, leave the default (CREATE_NEW) and the template will create one. Note: By default, the new Application Insights environment will be created in **East US**, if necessary you can specify a different region as **CREATE_NEW:app_insights_region**)."
            }, 
            "type": "string"
        }, 
        "calculatedBandwidth": {
            "allowedValues": [
                "10m", 
                "25m", 
                "100m", 
                "200m", 
                "1g"
            ], 
            "defaultValue": "200m", 
            "metadata": {
                "description": "Specify the amount of bandwidth (in Mbps) that should be used to base the throughput percentage calculation on for scale events. For PAYG, we recommend that this match the parameter **licensedBandwidth**, or at minimum is a lower value."
            }, 
            "type": "string"
        }, 
        "scaleOutThreshold": {
            "allowedValues": [
                50, 
                55, 
                60, 
                65, 
                70, 
                75, 
                80, 
                85, 
                90, 
                95
            ], 
            "defaultValue": 90, 
            "metadata": {
                "description": "The percentage the metric should be above to trigger a Scale Out event.  Note: For network utilization metrics this is factored as a percentage of the parameter 'calculatedBandwidth'."
            }, 
            "type": "int"
        }, 
        "scaleInThreshold": {
            "allowedValues": [
                5, 
                10, 
                15, 
                20, 
                25, 
                30, 
                35, 
                40, 
                45
            ], 
            "defaultValue": 10, 
            "metadata": {
                "description": "The percentage the metric should be below to trigger a Scale In event.  Note: For network utilization metrics this is factored as a percentage of the parameter 'calculatedBandwidth'."
            }, 
            "type": "int"
        }, 
        "scaleTimeWindow": {
            "allowedValues": [
                5, 
                10, 
                15, 
                30
            ], 
            "defaultValue": 10, 
            "metadata": {
                "description": "The time window required to trigger a scale event (in and out). This is used to determine the amount of time needed for a threshold to be breached, as well as to prevent excessive scaling events (flapping)."
            }, 
            "type": "int"
        }, 
        "adminUsername": {
            "defaultValue": "azureuser", 
            "metadata": {
                "description": "User name for the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "adminPassword": {
            "metadata": {
                "description": "Password to login to the Virtual Machine."
            }, 
            "type": "securestring"
        }, 
        "dnsLabel": {
            "defaultValue": "REQUIRED", 
            "metadata": {
                "description": "Unique DNS Name for the Public IP address used to access the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "instanceType": {
            "allowedValues": [
                "Standard_A2", 
                "Standard_A3", 
                "Standard_A4", 
                "Standard_A5", 
                "Standard_A6", 
                "Standard_A7", 
                "Standard_D2", 
                "Standard_D3", 
                "Standard_D4", 
                "Standard_D11", 
                "Standard_D12", 
                "Standard_D13", 
                "Standard_D14", 
                "Standard_DS2", 
                "Standard_DS3", 
                "Standard_DS4", 
                "Standard_DS11", 
                "Standard_DS12", 
                "Standard_DS13", 
                "Standard_DS14", 
                "Standard_D2_v2", 
                "Standard_D3_v2", 
                "Standard_D4_v2", 
                "Standard_D5_v2", 
                "Standard_D11_v2", 
                "Standard_D12_v2", 
                "Standard_D13_v2", 
                "Standard_D14_v2", 
                "Standard_D15_v2", 
                "Standard_DS2_v2", 
                "Standard_DS3_v2", 
                "Standard_DS4_v2", 
                "Standard_DS5_v2", 
                "Standard_DS11_v2", 
                "Standard_DS12_v2", 
                "Standard_DS13_v2", 
                "Standard_DS14_v2", 
                "Standard_DS15_v2", 
                "Standard_F2", 
                "Standard_F4", 
                "Standard_F8", 
                "Standard_F2S", 
                "Standard_F4S", 
                "Standard_F8S", 
                "Standard_F16S", 
                "Standard_G2", 
                "Standard_G3", 
                "Standard_G4", 
                "Standard_G5", 
                "Standard_GS2", 
                "Standard_GS3", 
                "Standard_GS4", 
                "Standard_GS5"
            ], 
            "defaultValue": "Standard_DS2_v2", 
            "metadata": {
                "description": "Azure instance size of the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "imageName": {
            "allowedValues": [
                "Good", 
                "Better", 
                "Best"
            ], 
            "defaultValue": "Good", 
            "metadata": {
                "description": "F5 SKU (IMAGE) to you want to deploy."
            }, 
            "type": "string"
        }, 
        "bigIpVersion": {
            "allowedValues": [
                "13.0.0300", 
                "12.1.2200", 
                "latest"
            ], 
            "defaultValue": "13.0.0300", 
            "metadata": {
                "description": "F5 BIG-IP version you want to use."
            }, 
            "type": "string"
        }, 
        "licensedBandwidth": {
            "allowedValues": [
                "25m", 
                "200m", 
                "1g"
            ], 
            "defaultValue": "200m", 
            "metadata": {
                "description": "The amount of licensed bandwidth (Mbps) you want the PAYG image to use."
            }, 
            "type": "string"
        }, 
        "vnetName": {
            "metadata": {
                "description": "The name of the existing virtual network to which you want to connect the BIG-IP VEs."
            }, 
            "type": "string"
        }, 
        "vnetResourceGroupName": {
            "metadata": {
                "description": "The name of the resource group that contains the Virtual Network where the BIG-IP VE will be placed."
            }, 
            "type": "string"
        }, 
        "mgmtSubnetName": {
            "metadata": {
                "description": "Name of the existing MGMT subnet - with external access to the Internet."
            }, 
            "type": "string"
        }, 
        "tenantId": {
            "metadata": {
                "description": "Your Azure service principal application tenant ID."
            }, 
            "type": "string"
        }, 
        "clientId": {
            "metadata": {
                "description": "Your Azure service principal application client ID."
            }, 
            "type": "string"
        }, 
        "servicePrincipalSecret": {
            "metadata": {
                "description": "Your Azure service principal application secret."
            }, 
            "type": "securestring"
        }, 
        "notificationEmail": {
            "defaultValue": "OPTIONAL", 
            "metadata": {
                "description": "If you want email notifications on scale events, specify an email address, otherwise leave the parameter as **OPTIONAL**. Note: You can specify multiple emails by separating them with a semi-colon, such as *email@domain.com;email2@domain.com*."
            }, 
            "type": "string"
        }, 
        "ntpServer": {
            "defaultValue": "0.pool.ntp.org", 
            "metadata": {
                "description": "If you want to change the NTP server the BIG-IP uses then replace the default NTP server with your choice."
            }, 
            "type": "string"
        }, 
        "timeZone": {
            "defaultValue": "UTC", 
            "metadata": {
                "description": "If you would like to change the time zone the BIG-IP uses, enter the time zone you want to use. This is based on the tz database found in /usr/share/zoneinfo. Example values: UTC, US/Pacific, US/Eastern, Europe/London or Asia/Singapore."
            }, 
            "type": "string"
        }, 
        "restrictedSrcAddress": {
            "defaultValue": "*", 
            "metadata": {
                "description": "This field restricts management access to a specific network or address. Enter an IP address or address range in CIDR notation, or asterisk for all sources"
            }, 
            "type": "string"
        }, 
        "tagValues": {
            "defaultValue": {
                "application": "APP", 
                "cost": "COST", 
                "environment": "ENV", 
                "group": "GROUP", 
                "owner": "OWNER"
            }, 
            "metadata": {
                "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
            }, 
            "type": "object"
        }, 
        "allowUsageAnalytics": {
            "allowedValues": [
                "Yes", 
                "No"
            ], 
            "defaultValue": "Yes", 
            "metadata": {
                "description": "This deployment can send anonymous statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent."
            }, 
            "type": "string"
        }
    }, 
    "variables": {
        "bigIpNicPortMap": {
            "1": {
                "Port": "[parameters('bigIpVersion')]"
            }, 
            "2": {
                "Port": "443"
            }, 
            "3": {
                "Port": "443"
            }, 
            "4": {
                "Port": "443"
            }, 
            "5": {
                "Port": "443"
            }, 
            "6": {
                "Port": "443"
            }
        }, 
        "bigIpVersionPortMap": {
            "12.1.2200": {
                "Port": 443
            }, 
            "13.0.0300": {
                "Port": 8443
            }, 
            "443": {
                "Port": 443
            }, 
            "latest": {
                "Port": 8443
            }
        }, 
        "apiVersion": "2015-06-15", 
        "computeApiVersion": "2016-04-30-preview", 
        "networkApiVersion": "2016-06-01", 
        "storageApiVersion": "2015-06-15", 
        "insightsApiVersion": "2015-04-01", 
        "appInsightsApiVersion": "2015-05-01", 
        "location": "[resourceGroup().location]", 
        "defaultAppInsightsLocation": "eastus", 
        "appInsightsLocation": "[split(concat(parameters('appInsights'), ':', variables('defaultAppInsightsLocation')), ':')[1]]", 
        "subscriptionID": "[subscription().subscriptionId]", 
        "resourceGroupName": "[resourceGroup().name]", 
        "singleQuote": "'", 
        "f5Tag": "82e08e16-fc62-4bf0-8916-e1c02dc871cd", 
        "f5TemplateTag": "ltm_autoscale", 
        "f5CloudLibsTag": "v3.4.2", 
        "f5CloudLibsAzureTag": "v1.3.0", 
        "f5NetworksTag": "v4.2.0.0", 
        "f5CloudIappsTag": "v1.1.1", 
        "verifyHash": "[concat(variables('singleQuote'), 'cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 5b5035fe7e1d98260be409cc29d65da49bcaaa9becb4124b308023ce8790439356a2b85de4ce5a4433532967e1d5f13379e98eeadcf251b607032f47481d832f\n            set hashes(f5-cloud-libs-aws.tar.gz) 279254b05d175df4ba1155fa810b3ea66a38e69198d7a6840ac9443ce730a5997e12c3b76af76ebadf13550d8bb0d45a5b09badfff4aac89e75d121bc166358d\n            set hashes(f5-cloud-libs-azure.tar.gz) 3c52145334fe80da577f980cdfbb1ef71fa4284b2f7fb4fa6f241cf50528e9fdc8df088a8312c3f6b90d3db198c787f7c10739e4098efb071cc29bf0ed70437b\n            set hashes(f5-cloud-libs-gce.tar.gz) 6ef33cc94c806b1e4e9e25ebb96a20eb1fe5975a83b2cd82b0d6ccbc8374be113ac74121d697f3bfc26bf49a55e948200f731607ce9aa9d23cd2e81299a653c1\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 7ac8caac0f4e6f3907cd541a2d905931e97cd0220b443403dfbaaa30f3cad615fcd9420a3123327c2609441bd4a87d86a1a35b7567dbe78e3f97bd954a3cc5df\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) d4008a2c5a7f26cc42eb5cbe2171e15e6e95afb1b34fb03d04f6c1b80f154d896e6faaa2e04fbb85fd8e0e51b479dbfcd286357ce0967b162233cc57e0138b96\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature Ta4Gw6Snzfn7VC9D1S4f5CZiYfFyxDJWJTUEAbQ17i5ZQ2CPuQ8TBiNQy2Z/s3mmiJ2ZYdPTTST8FfTq5DsWobvZt1eQrsLjV9TR+FVyPzL2ePOBPmofUq/TKV2RhF1Vhm7mIEk+YbkxTmwaNnba1dLWj9KY7lN5ue6t1PfqqZmHQuMaOtywn0bX+Jhp0VdrS70PkH4NkRmFHVzuoC+NmMXLagr198yXW3IAHu7aViWFj8F4Y+asI8HO2+dAJ3srd/y00RjfNBANvXpEZHoi2hU4uLHuqBiJRa+4L2ADmj+x3a4Q1hVTxCCVWoItrUbPheQqgVOXpr4h7vdAL/eI/w==\n    signing-key /Common/f5-irule\n}', variables('singleQuote'))]", 
        "installCloudLibs": "[concat(variables('singleQuote'), '#!/bin/bash\necho about to execute\nchecks=0\nwhile [ $checks -lt 120 ]; do echo checking mcpd\n/usr/bin/tmsh -a show sys mcp-state field-fmt | grep -q running\nif [ $? == 0 ]; then\necho mcpd ready\nbreak\nfi\necho mcpd not ready yet\nlet checks=checks+1\nsleep 1\ndone\necho loading verifyHash script\n/usr/bin/tmsh load sys config merge file /config/verifyHash\nif [ $? != 0 ]; then\necho cannot validate signature of /config/verifyHash\nexit 1\nfi\necho loaded verifyHash\n\nconfig_loc=\"/config/cloud/\"\nhashed_file_list=\"${config_loc}f5-cloud-libs.tar.gz f5.service_discovery.tmpl ${config_loc}f5-cloud-libs-azure.tar.gz\"\nfor file in $hashed_file_list; do\necho \"verifying $file\"\n/usr/bin/tmsh run cli script verifyHash $file\nif [ $? != 0 ]; then\necho \"$file is not valid\"\nexit 1\nfi\necho \"verified $file\"\ndone\necho \"expanding $hashed_file_list\"\ntar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/azure/node_modules\ntar xvfz /config/cloud/f5-cloud-libs-azure.tar.gz -C /config/cloud/azure/node_modules/f5-cloud-libs/node_modules\ntouch /config/cloud/cloudLibsReady', variables('singleQuote'))]", 
        "dnsLabel": "[toLower(parameters('dnsLabel'))]", 
        "imageNameToLower": "[toLower(parameters('imageName'))]", 
        "skuToUse": "[concat('f5-bigip-virtual-edition-', parameters('licensedBandwidth'), '-', variables('imageNameToLower'),'-hourly')]", 
        "offerToUse": "f5-big-ip-hourly", 
        "bigIpNicPortValue": "[variables('bigIpNicPortMap')['1'].Port]", 
        "bigIpMgmtPort": 8443, 
        "availabilitySetName": "[concat(variables('dnsLabel'), '-avset')]", 
        "virtualNetworkName": "[parameters('vnetName')]", 
        "vnetId": "[resourceId(parameters('vnetResourceGroupName'),'Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]", 
        "publicIPAddressType": "Static", 
        "mgmtPublicIPAddressName": "[concat(variables('dnsLabel'), '-mgmt-pip')]", 
        "mgmtPublicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('mgmtPublicIPAddressName'))]", 
        "mgmtNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-mgmt-nsg'))]", 
        "mgmtNicName": "[concat(variables('dnsLabel'), '-mgmt')]", 
        "mgmtNicID": "[resourceId('Microsoft.Network/NetworkInterfaces', variables('mgmtNicName'))]", 
        "mgmtSubnetName": "[parameters('mgmtSubnetName')]", 
        "mgmtSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('mgmtSubnetName'))]", 
        "deviceNamePrefix": "[concat(variables('dnsLabel'),'-device')]", 
        "externalLoadBalancerName": "[concat(variables('dnsLabel'),'-ext-alb')]", 
        "extLbId": "[resourceId('Microsoft.Network/loadBalancers',variables('externalLoadBalancerName'))]", 
        "frontEndIPConfigID": "[concat(variables('extLbId'),'/frontendIPConfigurations/loadBalancerFrontEnd')]", 
        "vmssName": "[concat(parameters('dnsLabel'),'-vmss')]", 
        "vmssId": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('vmssName'))]", 
        "appInsightsName": "[replace(split(parameters('appInsights'), ':')[0], 'CREATE_NEW', concat(deployment().name, '-appinsights'))]", 
        "appInsightsNameArray": "[split(concat(variables('appInsightsName'), ';', variables('resourceGroupName')) , ';')]", 
        "10m": 10485760, 
        "25m": 26214400, 
        "100m": 104857600, 
        "200m": 209715200, 
        "1g": 1073741824, 
        "scaleOutCalc": "[mul(variables(parameters('calculatedBandwidth')), parameters('scaleOutThreshold'))]", 
        "scaleInCalc": "[mul(variables(parameters('calculatedBandwidth')), parameters('scaleInThreshold'))]", 
        "scaleOutNetworkBits": "[div(variables('scaleOutCalc'), 100)]", 
        "scaleInNetworkBits": "[div(variables('scaleInCalc'), 100)]", 
        "scaleOutNetworkBytes": "[div(variables('scaleOutNetworkBits'), 8)]", 
        "scaleInNetworkBytes": "[div(variables('scaleInNetworkBits'), 8)]", 
        "timeWindow": "[concat('PT', parameters('scaleTimeWindow'), 'M')]", 
        "autoScaleMetric": "[parameters('autoScaleMetric')]", 
        "scaleMetricMap": {
            "Host_Throughput": {
                "metricName": "Network Out", 
                "metricResourceUri": "[variables('vmssId')]", 
                "thresholdIn": "[variables('scaleInNetworkBytes')]", 
                "thresholdOut": "[variables('scaleOutNetworkBytes')]"
            }, 
            "TMM_CPU": {
                "metricName": "customMetrics/F5_TMM_CPU", 
                "metricResourceUri": "[resourceId(variables('appInsightsNameArray')[1], 'Microsoft.Insights/components', variables('appInsightsNameArray')[0])]", 
                "thresholdIn": "[parameters('scaleInThreshold')]", 
                "thresholdOut": "[parameters('scaleOutThreshold')]"
            }, 
            "TMM_Traffic": {
                "metricName": "customMetrics/F5_TRAFFIC_TOTAL_BYTES", 
                "metricResourceUri": "[resourceId(variables('appInsightsNameArray')[1], 'Microsoft.Insights/components', variables('appInsightsNameArray')[0])]", 
                "thresholdIn": "[variables('scaleInNetworkBytes')]", 
                "thresholdOut": "[variables('scaleOutNetworkBytes')]"
            }
        }, 
        "customEmailBaseArray": [
            ""
        ], 
        "customEmail": "[skip(union(variables('customEmailBaseArray'), split(replace(parameters('notificationEmail'), 'OPTIONAL', ''), ';')), 1)]", 
        "instanceTypeMap": {
            "Standard_A3": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_A4": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_A5": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_A6": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_A7": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_D11": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_D11_v2": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_D12": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_D12_v2": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_D13": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_D13_v2": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_D14": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_D14_v2": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_D15_v2": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_D2": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_D2_v2": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_D3": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_D3_v2": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_D4": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_D4_v2": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_D5_v2": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_DS1": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS11": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS11_v2": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS12": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS12_v2": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS13": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS13_v2": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS14": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS14_v2": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS15_v2": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS1_v2": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS2": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS2_v2": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS3": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS3_v2": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS4": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS4_v2": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_DS5_v2": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_F2": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_F4": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_G1": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_G2": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_G3": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_G4": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_G5": {
                "storageAccountType": "Standard_LRS"
            }, 
            "Standard_GS1": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_GS2": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_GS3": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_GS4": {
                "storageAccountType": "Premium_LRS"
            }, 
            "Standard_GS5": {
                "storageAccountType": "Premium_LRS"
            }
        }, 
        "newStorageAccountName": "[concat(uniqueString(resourceGroup().id, deployment().name), 'stor')]", 
        "storageAccountType": "[variables('instanceTypeMap')[parameters('instanceType')].storageAccountType]", 
        "newDataStorageAccountName": "[concat(uniqueString(resourceGroup().id, deployment().name), 'data000')]", 
        "dataStorageAccountType": "Standard_LRS", 
        "deploymentId": "[concat(variables('subscriptionId'), resourceGroup().id, deployment().name, variables('dnsLabel'))]", 
        "allowUsageAnalytics": {
            "No": {
                "hashCmd": "echo AllowUsageAnalytics:No", 
                "metricsCmd": ""
            }, 
            "Yes": {
                "hashCmd": "[concat('custId=`echo \"', variables('subscriptionId'), '\"|sha512sum|cut -d \" \" -f 1`; deployId=`echo \"', variables('deploymentId'), '\"|sha512sum|cut -d \" \" -f 1`')]", 
                "metricsCmd": "[concat(' --usageAnalytics \" --metrics customerId:${custId},deploymentId:${deployId},templateName:ltm_autoscale-existing_stack-experimental,templateVersion:4.2.0.0,region:', variables('location'), ',bigIpVersion:', parameters('bigIpVersion') ,',licenseType:PAYG,cloudLibsVersion:', variables('f5CloudLibsTag'), ',cloudName:azure\"')]"
            }
        }, 
        "customConfig": "### START (INPUT) CUSTOM CONFIGURATION HERE\n", 
        "installCustomConfig": "[concat(variables('singleQuote'), '#!/bin/bash\n', variables('customConfig'), variables('singleQuote'))]"
    }, 
    "resources": [
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[variables('mgmtPublicIPAddressName')]", 
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[variables('dnsLabel')]"
                }, 
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": {
                "application": "[parameters('tagValues').application]", 
                "costCenter": "[parameters('tagValues').cost]", 
                "environment": "[parameters('tagValues').environment]", 
                "f5": "[variables('f5Tag')]", 
                "f5Template": "[variables('f5TemplateTag')]", 
                "group": "[parameters('tagValues').group]", 
                "owner": "[parameters('tagValues').owner]"
            }, 
            "type": "Microsoft.Network/publicIPAddresses"
        }, 
        {
            "apiVersion": "[variables('apiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-mgmt-nsg')]", 
            "properties": {
                "securityRules": [
                    {
                        "name": "mgmt_allow_https", 
                        "properties": {
                            "access": "Allow", 
                            "description": "", 
                            "destinationAddressPrefix": "*", 
                            "destinationPortRange": "[variables('bigIpMgmtPort')]", 
                            "direction": "Inbound", 
                            "priority": 101, 
                            "protocol": "TCP", 
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]", 
                            "sourcePortRange": "*"
                        }
                    }, 
                    {
                        "name": "ssh_allow_22", 
                        "properties": {
                            "access": "Allow", 
                            "description": "", 
                            "destinationAddressPrefix": "*", 
                            "destinationPortRange": "22", 
                            "direction": "Inbound", 
                            "priority": 102, 
                            "protocol": "TCP", 
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]", 
                            "sourcePortRange": "*"
                        }
                    }
                ]
            }, 
            "tags": {
                "application": "[parameters('tagValues').application]", 
                "costCenter": "[parameters('tagValues').cost]", 
                "environment": "[parameters('tagValues').environment]", 
                "f5": "[variables('f5Tag')]", 
                "f5Template": "[variables('f5TemplateTag')]", 
                "group": "[parameters('tagValues').group]", 
                "owner": "[parameters('tagValues').owner]"
            }, 
            "type": "Microsoft.Network/networkSecurityGroups"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('mgmtPublicIPAddressName'))]"
            ], 
            "location": "[variables('location')]", 
            "name": "[variables('externalLoadBalancerName')]", 
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    }
                ], 
                "frontendIPConfigurations": [
                    {
                        "name": "loadBalancerFrontEnd", 
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('mgmtPublicIPAddressId')]"
                            }
                        }
                    }
                ], 
                "inboundNatPools": [
                    {
                        "name": "sshnatpool", 
                        "properties": {
                            "backendPort": 22, 
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigID')]"
                            }, 
                            "frontendPortRangeEnd": 50100, 
                            "frontendPortRangeStart": 50001, 
                            "protocol": "tcp"
                        }
                    }, 
                    {
                        "name": "mgmtnatpool", 
                        "properties": {
                            "backendPort": "[variables('bigIpMgmtPort')]", 
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigID')]"
                            }, 
                            "frontendPortRangeEnd": 50200, 
                            "frontendPortRangeStart": 50101, 
                            "protocol": "tcp"
                        }
                    }
                ], 
                "loadBalancingRules": "", 
                "probes": ""
            }, 
            "tags": {
                "application": "[parameters('tagValues').application]", 
                "costCenter": "[parameters('tagValues').cost]", 
                "environment": "[parameters('tagValues').environment]", 
                "f5": "[variables('f5Tag')]", 
                "f5Template": "[variables('f5TemplateTag')]", 
                "group": "[parameters('tagValues').group]", 
                "owner": "[parameters('tagValues').owner]"
            }, 
            "type": "Microsoft.Network/loadBalancers"
        }, 
        {
            "apiVersion": "[variables('storageApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[variables('newStorageAccountName')]", 
            "properties": {
                "accountType": "[variables('storageAccountType')]"
            }, 
            "tags": {
                "application": "[parameters('tagValues').application]", 
                "costCenter": "[parameters('tagValues').cost]", 
                "environment": "[parameters('tagValues').environment]", 
                "f5": "[variables('f5Tag')]", 
                "f5Template": "[variables('f5TemplateTag')]", 
                "group": "[parameters('tagValues').group]", 
                "owner": "[parameters('tagValues').owner]"
            }, 
            "type": "Microsoft.Storage/storageAccounts"
        }, 
        {
            "apiVersion": "[variables('storageApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[variables('newDataStorageAccountName')]", 
            "properties": {
                "accountType": "[variables('dataStorageAccountType')]"
            }, 
            "tags": {
                "application": "[parameters('tagValues').application]", 
                "costCenter": "[parameters('tagValues').cost]", 
                "environment": "[parameters('tagValues').environment]", 
                "f5": "[variables('f5Tag')]", 
                "f5Template": "[variables('f5TemplateTag')]", 
                "group": "[parameters('tagValues').group]", 
                "owner": "[parameters('tagValues').owner]"
            }, 
            "type": "Microsoft.Storage/storageAccounts"
        }, 
        {
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]"
            ], 
            "location": "[variables('location')]", 
            "name": "[variables('vmssName')]", 
            "plan": {
                "name": "[variables('skuToUse')]", 
                "product": "[variables('offerToUse')]", 
                "publisher": "f5-networks"
            }, 
            "properties": {
                "overprovision": "false", 
                "upgradePolicy": {
                    "mode": "Manual"
                }, 
                "virtualMachineProfile": {
                    "extensionProfile": {
                        "extensions": [
                            {
                                "name": "main", 
                                "properties": {
                                    "protectedSettings": {
                                        "commandToExecute": "[concat('mkdir -p /config/cloud/azure/node_modules; AZURE_CREDENTIALS_FILE=/config/cloud/.azCredentials; BIG_IP_CREDENTIALS_FILE=/config/cloud/.passwd; /usr/bin/install -m 400 /dev/null $AZURE_CREDENTIALS_FILE; /usr/bin/install -m 400 /dev/null $BIG_IP_CREDENTIALS_FILE; echo ', variables('singleQuote'), parameters('adminPassword'), variables('singleQuote'), ' > $BIG_IP_CREDENTIALS_FILE; echo ', variables('singleQuote'), '{\"clientId\": \"', parameters('clientId'), '\", \"tenantId\": \"', parameters('tenantId'), '\", \"secret\": \"', parameters('servicePrincipalSecret'), '\", \"subscriptionId\": \"', variables('subscriptionID'), '\", \"storageAccount\": \"', variables('newDataStorageAccountName'), '\", \"storageKey\": \"', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('newDataStorageAccountName')), variables('storageApiVersion')).key1, '\", \"resourceGroupName\": \"', variables('resourceGroupName'), '\", \"loadBalancerName\": \"', variables('externalLoadBalancerName'), '\"}', variables('singleQuote'), ' > $AZURE_CREDENTIALS_FILE; cp f5-cloud-libs*.tar.gz* /config/cloud; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; echo -e ', variables('verifyHash'), ' >> /config/verifyHash; echo -e ', variables('installCloudLibs'), ' >> /config/installCloudLibs.sh; echo -e ', variables('installCustomConfig'), ' >> /config/customConfig.sh; bash /config/installCloudLibs.sh;', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].hashCmd, ';  bash /config/cloud/azure/node_modules/f5-cloud-libs/node_modules/f5-cloud-libs-azure/scripts/autoscale.sh --resourceGroup ', resourceGroup().name, ' --vmssName ', variables('vmssName'), ' --userName ', parameters('adminUsername'), ' --password $BIG_IP_CREDENTIALS_FILE --azureSecretFile $AZURE_CREDENTIALS_FILE --managementPort ', variables('bigIpMgmtPort'), ' --ntpServer ', parameters('ntpServer'), ' --timeZone ', parameters('timeZone'), variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].metricsCmd, ' --appInsightsKey ', variables('singleQuote'), reference(resourceId(variables('appInsightsNameArray')[1], 'Microsoft.Insights/components', variables('appInsightsNameArray')[0]), variables('appInsightsApiVersion')).InstrumentationKey, variables('singleQuote'), '; if [[ $? == 0 ]]; then tmsh load sys application template f5.service_discovery.tmpl; bash /config/customConfig.sh; else exit 1; fi')]"
                                    }, 
                                    "publisher": "Microsoft.Azure.Extensions", 
                                    "settings": {
                                        "fileUris": [
                                            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/', variables('f5CloudLibsTag'), '/dist/f5-cloud-libs.tar.gz')]", 
                                            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/', variables('f5CloudIappsTag'), '/f5-service-discovery/f5.service_discovery.tmpl')]", 
                                            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs-azure/', variables('f5CloudLibsAzureTag'), '/dist/f5-cloud-libs-azure.tar.gz')]"
                                        ]
                                    }, 
                                    "type": "CustomScript", 
                                    "typeHandlerVersion": "2.0"
                                }
                            }
                        ]
                    }, 
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "nic1", 
                                "properties": {
                                    "ipConfigurations": [
                                        {
                                            "name": "ipconfig1", 
                                            "properties": {
                                                "loadBalancerBackendAddressPools": [
                                                    {
                                                        "id": "[concat('/subscriptions/', variables('subscriptionID'),'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('externalLoadBalancerName'), '/backendAddressPools/loadBalancerBackEnd')]"
                                                    }
                                                ], 
                                                "loadBalancerInboundNatPools": [
                                                    {
                                                        "id": "[concat('/subscriptions/', variables('subscriptionID'),'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('externalLoadBalancerName'), '/inboundNatPools/sshnatpool')]"
                                                    }, 
                                                    {
                                                        "id": "[concat('/subscriptions/', variables('subscriptionID'),'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('externalLoadBalancerName'), '/inboundNatPools/mgmtnatpool')]"
                                                    }
                                                ], 
                                                "subnet": {
                                                    "id": "[variables('mgmtSubnetId')]"
                                                }
                                            }
                                        }
                                    ], 
                                    "networkSecurityGroup": {
                                        "id": "[variables('mgmtNsgID')]"
                                    }, 
                                    "primary": true
                                }
                            }
                        ]
                    }, 
                    "osProfile": {
                        "adminPassword": "[parameters('adminPassword')]", 
                        "adminUsername": "[parameters('adminUsername')]", 
                        "computerNamePrefix": "[variables('vmssName')]"
                    }, 
                    "storageProfile": {
                        "imageReference": {
                            "offer": "[variables('offerToUse')]", 
                            "publisher": "f5-networks", 
                            "sku": "[variables('skuToUse')]", 
                            "version": "[parameters('bigIpVersion')]"
                        }, 
                        "osDisk": {
                            "caching": "ReadOnly", 
                            "createOption": "FromImage", 
                            "name": "vmssosdisk", 
                            "vhdContainers": [
                                "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, 'vmss1/')]"
                            ]
                        }
                    }
                }
            }, 
            "sku": {
                "capacity": "[parameters('vmScaleSetMinCount')]", 
                "name": "[parameters('instanceType')]", 
                "tier": "Standard"
            }, 
            "tags": {
                "application": "[parameters('tagValues').application]", 
                "costCenter": "[parameters('tagValues').cost]", 
                "environment": "[parameters('tagValues').environment]", 
                "f5": "[variables('f5Tag')]", 
                "f5Template": "[variables('f5TemplateTag')]", 
                "group": "[parameters('tagValues').group]", 
                "owner": "[parameters('tagValues').owner]"
            }, 
            "type": "Microsoft.Compute/virtualMachineScaleSets"
        }, 
        {
            "apiVersion": "[variables('insightsApiVersion')]", 
            "dependsOn": [
                "[variables('vmssId')]"
            ], 
            "location": "[variables('location')]", 
            "name": "autoscaleconfig", 
            "properties": {
                "enabled": true, 
                "name": "autoscaleconfig", 
                "notifications": [
                    {
                        "email": {
                            "customEmails": "[variables('customEmail')]", 
                            "sendToSubscriptionAdministrator": false, 
                            "sendToSubscriptionCoAdministrators": false
                        }, 
                        "operation": "Scale", 
                        "webhooks": []
                    }
                ], 
                "profiles": [
                    {
                        "capacity": {
                            "default": "[parameters('vmScaleSetMinCount')]", 
                            "maximum": "[parameters('vmScaleSetMaxCount')]", 
                            "minimum": "[parameters('vmScaleSetMinCount')]"
                        }, 
                        "name": "Profile1", 
                        "rules": [
                            {
                                "metricTrigger": {
                                    "metricName": "[variables('scaleMetricMap')[variables('autoScaleMetric')].metricName]", 
                                    "metricNamespace": "", 
                                    "metricResourceUri": "[variables('scaleMetricMap')[variables('autoScaleMetric')].metricResourceUri]", 
                                    "operator": "GreaterThan", 
                                    "statistic": "Average", 
                                    "threshold": "[variables('scaleMetricMap')[variables('autoScaleMetric')].thresholdOut]", 
                                    "timeAggregation": "Average", 
                                    "timeGrain": "PT1M", 
                                    "timeWindow": "[variables('timeWindow')]"
                                }, 
                                "scaleAction": {
                                    "cooldown": "PT1M", 
                                    "direction": "Increase", 
                                    "type": "ChangeCount", 
                                    "value": "1"
                                }
                            }, 
                            {
                                "metricTrigger": {
                                    "metricName": "[variables('scaleMetricMap')[variables('autoScaleMetric')].metricName]", 
                                    "metricNamespace": "", 
                                    "metricResourceUri": "[variables('scaleMetricMap')[variables('autoScaleMetric')].metricResourceUri]", 
                                    "operator": "LessThan", 
                                    "statistic": "Average", 
                                    "threshold": "[variables('scaleMetricMap')[variables('autoScaleMetric')].thresholdIn]", 
                                    "timeAggregation": "Average", 
                                    "timeGrain": "PT1M", 
                                    "timeWindow": "[variables('timeWindow')]"
                                }, 
                                "scaleAction": {
                                    "cooldown": "PT1M", 
                                    "direction": "Decrease", 
                                    "type": "ChangeCount", 
                                    "value": "1"
                                }
                            }
                        ]
                    }
                ], 
                "targetResourceUri": "[variables('vmssId')]"
            }, 
            "type": "Microsoft.Insights/autoscaleSettings"
        }, 
        {
            "apiVersion": "[variables('appInsightsApiVersion')]", 
            "condition": "[contains(toUpper(parameters('appInsights')), 'CREATE_NEW')]", 
            "dependsOn": [], 
            "kind": "other", 
            "location": "[variables('appInsightsLocation')]", 
            "name": "[variables('appInsightsName')]", 
            "properties": {
                "ApplicationId": "[variables('appInsightsName')]", 
                "Application_Type": "other"
            }, 
            "tags": {
                "application": "[parameters('tagValues').application]", 
                "costCenter": "[parameters('tagValues').cost]", 
                "environment": "[parameters('tagValues').environment]", 
                "f5": "[variables('f5Tag')]", 
                "f5Template": "[variables('f5TemplateTag')]", 
                "group": "[parameters('tagValues').group]", 
                "owner": "[parameters('tagValues').owner]"
            }, 
            "type": "microsoft.insights/components"
        }
    ], 
    "outputs": {
        "GUI-URL": {
            "type": "string", 
            "value": "[concat('https://',reference(variables('mgmtPublicIPAddressId')).dnsSettings.fqdn,':50101', ' - 50200')]"
        }, 
        "SSH-URL": {
            "type": "string", 
            "value": "[concat(reference(variables('mgmtPublicIPAddressId')).dnsSettings.fqdn,' ',50001, ' - 50100')]"
        }
    }
}