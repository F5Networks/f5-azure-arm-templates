{% set failover_cmd_array %}
{% if nics == 'n'%}
"15": "tmsh modify sys db failover.selinuxallowscripts value enable",
"14": "tmsh modify sys db failover.selinuxallowscripts value enable",
"13": "tmsh list sys db",
"12": "tmsh list sys db",
"latest": "tmsh modify sys db failover.selinuxallowscripts value enable"
{% elif nics == '3' %}
"No": {
"first": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '0.', variables('location'), '.cloudapp.azure.com'), ' unicast-address none')]",
"second": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '1.', variables('location'), '.cloudapp.azure.com'), ' unicast-address none')]"
},
"Yes": {
"first": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '0.', variables('location'), '.cloudapp.azure.com'), ' unicast-address { { ip ', variables('intSubnetPrivateAddress'), ' port 1026 } } mirror-ip ', variables('intSubnetPrivateAddress'))]",
"second": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '1.', variables('location'), '.cloudapp.azure.com'), ' unicast-address { { ip ', variables('intSubnetPrivateAddress1'), ' port 1026 } } mirror-ip ', variables('intSubnetPrivateAddress1'))]"
}
{% endif %}
{% endset %}
{% if environment == 'azure' %}
{% set compute_api_version = "2017-12-01" %}
{% set auth_api_version = "2018-07-01" %}
{% set deploy_api_version = "2017-05-10" %}
{% set network_api_version = "2018-07-01" %}
{% set storage_api_version = "2017-10-01" %}
{% elif environment == 'azurestack' %}
{% set compute_api_version = "2015-06-15" %}
{% set network_api_version = "2015-06-15" %}
{% set storage_api_version = "2015-06-15" %}
{% endif %}
{% set vm_scale_set_min_count %}
{% if license_type == 'bigiq-payg' %}
0,
{% endif %}
1,
2,
3,
4,
5,
6
{%- endset %}
{% set vm_scale_set_max_count %}
{% if license_type == 'bigiq-payg' %}
1,
{% endif %}
2,
3,
4,
5,
6,
7,
8
{%- endset %}
{% set number_of_external_ips %}
0,
1,
2,
3,
4,
5,
6,
7,
8,
9,
10,
11,
12,
13,
14,
15,
16,
17,
18,
19,
20
{%- endset %}


{%- set instance_type_list -%}

{%- if nics in ('3', 'n') and (type != 'bigiq') -%}
"Standard_A3",
"Standard_A4",
"Standard_A5",
"Standard_A6",
"Standard_A7",
"Standard_D3",
"Standard_D4",
"Standard_D11",
"Standard_D12",
"Standard_D13",
"Standard_D14",
"Standard_DS3",
"Standard_DS4",
"Standard_DS11",
"Standard_DS12",
"Standard_DS13",
"Standard_DS14",
"Standard_D3_v2",
"Standard_D4_v2",
"Standard_D5_v2",
"Standard_D11_v2",
"Standard_D12_v2",
"Standard_D13_v2",
"Standard_D14_v2",
"Standard_D15_v2",
"Standard_DS3_v2",
"Standard_DS4_v2",
"Standard_DS5_v2",
"Standard_DS11_v2",
"Standard_DS12_v2",
"Standard_DS13_v2",
"Standard_DS14_v2",
"Standard_DS15_v2",
"Standard_F4",
"Standard_F8",
"Standard_F4S",
"Standard_F8S",
"Standard_F16S",
"Standard_G3",
"Standard_G4",
"Standard_G5",
"Standard_GS3",
"Standard_GS4",
"Standard_GS5"
{%- elif solution == "waf" and (type != 'bigiq') -%}
"Standard_A3",
"Standard_A4",
"Standard_A5",
"Standard_A6",
"Standard_A7",
"Standard_D2",
"Standard_D3",
"Standard_D4",
"Standard_D11",
"Standard_D12",
"Standard_D13",
"Standard_D14",
"Standard_DS2",
"Standard_DS3",
"Standard_DS4",
"Standard_DS11",
"Standard_DS12",
"Standard_DS13",
"Standard_DS14",
"Standard_D2_v2",
"Standard_D3_v2",
"Standard_D4_v2",
"Standard_D5_v2",
"Standard_D11_v2",
"Standard_D12_v2",
"Standard_D13_v2",
"Standard_D14_v2",
"Standard_D15_v2",
"Standard_DS2_v2",
"Standard_DS3_v2",
"Standard_DS4_v2",
"Standard_DS5_v2",
"Standard_DS11_v2",
"Standard_DS12_v2",
"Standard_DS13_v2",
"Standard_DS14_v2",
"Standard_DS15_v2",
"Standard_F4",
"Standard_F8",
"Standard_F2S",
"Standard_F4S",
"Standard_F8S",
"Standard_F16S",
"Standard_G2",
"Standard_G3",
"Standard_G4",
"Standard_G5",
"Standard_GS2",
"Standard_GS3",
"Standard_GS4",
"Standard_GS5"
{%- elif type == 'bigiq' -%}
"Standard_D4s_v3",
"Standard_D8s_v3"
{%- else -%}
"Standard_A2",
"Standard_A3",
"Standard_A4",
"Standard_A5",
"Standard_A6",
"Standard_A7",
"Standard_D2",
"Standard_D3",
"Standard_D4",
"Standard_D11",
"Standard_D12",
"Standard_D13",
"Standard_D14",
"Standard_DS2",
"Standard_DS3",
"Standard_DS4",
"Standard_DS11",
"Standard_DS12",
"Standard_DS13",
"Standard_DS14",
"Standard_D2_v2",
"Standard_D3_v2",
"Standard_D4_v2",
"Standard_D5_v2",
"Standard_D11_v2",
"Standard_D12_v2",
"Standard_D13_v2",
"Standard_D14_v2",
"Standard_D15_v2",
"Standard_DS2_v2",
"Standard_DS3_v2",
"Standard_DS4_v2",
"Standard_DS5_v2",
"Standard_DS11_v2",
"Standard_DS12_v2",
"Standard_DS13_v2",
"Standard_DS14_v2",
"Standard_DS15_v2",
"Standard_F2",
"Standard_F4",
"Standard_F8",
"Standard_F2S",
"Standard_F4S",
"Standard_F8S",
"Standard_F16S",
"Standard_G2",
"Standard_G3",
"Standard_G4",
"Standard_G5",
"Standard_GS2",
"Standard_GS3",
"Standard_GS4",
"Standard_GS5"
{%- endif -%}
{%- endset -%}
{%- set default_instance_type -%}
{% if nics in ('3', 'n') or (type == 'failover' and lb_method == 'api') -%}
"Standard_DS3_v2"
{% elif type == 'bigiq' %}
"Standard_D4s_v3"
{%- else %}
"Standard_DS2_v2"
{%- endif %}
{%- endset %}

{% set big_ip_versions -%}
"15.1.201000",
"14.1.003000",
"latest"
{%- endset %}
{%- set big_ip_version_default %}
"15.1.201000"
{%- endset %}

{% set big_iq_versions -%}
"6.1.000000"
{%- endset %}
{%- set big_iq_version_default %}
"6.1.000000"
{%- endset %}

{%- set product -%}
{%- if type == 'bigiq' -%}
BIG-IQ
{%- else -%}
BIG-IP
{%- endif -%}
{%- endset -%}

{%- set init_script -%}
""
{%- endset -%}
{%- set image_name_values -%}
{%- if license_type == "byol" %}
{%- if type == "failover" %}
"allowedValues": [
"LTMTwoBootLocations",
"AllTwoBootLocations"
],
"defaultValue": "AllTwoBootLocations"
{%- else %}
"allowedValues": [
"LTMOneBootLocation",
"LTMTwoBootLocations",
"AllOneBootLocation",
"AllTwoBootLocations"
],
"defaultValue": "AllTwoBootLocations"
{%- endif %}

{%- endif %}
{%- if license_type in ("payg", "bigiq-payg")%}
{%- if type == "standalone" -%}
"allowedValues": [
"Best25Mbps",
"Best200Mbps",
"Best1Gbps",
"Best5Gbps",
"Best10Gbps",
"Better25Mbps",
"Better200Mbps",
"Better1Gbps",
"Better5Gbps",
"Better10Gbps",
"Good25Mbps",
"Good200Mbps",
"Good1Gbps",
"Good5Gbps",
"Good10Gbps",
"AdvancedWaf25Mbps",
"AdvancedWaf200Mbps",
"AdvancedWaf1Gbps",
"PerAppVeLTM25Mbps",
"PerAppVeLTM200Mbps",
"PerAppVeAdvancedWaf25Mbps",
"PerAppVeAdvancedWaf200Mbps"
],
"defaultValue": "Best1Gbps"
{%- elif type == "failover" %}
"allowedValues": [
"Best25Mbps",
"Best200Mbps",
"Best1Gbps",
"Best5Gbps",
"Best10Gbps",
"Better25Mbps",
"Better200Mbps",
"Better1Gbps",
"Better5Gbps",
"Better10Gbps",
"Good25Mbps",
"Good200Mbps",
"Good1Gbps",
"Good5Gbps",
"Good10Gbps",
"AdvancedWaf25Mbps",
"AdvancedWaf200Mbps",
"AdvancedWaf1Gbps"
],
"defaultValue": "Best1Gbps"

{%- elif solution == "ltm" %}
"allowedValues": [
"Best25Mbps",
"Best200Mbps",
"Best1Gbps",
"Best5Gbps",
"Best10Gbps",
"Better25Mbps",
"Better200Mbps",
"Better1Gbps",
"Better5Gbps",
"Better10Gbps",
"Good25Mbps",
"Good200Mbps",
"Good1Gbps",
"Good5Gbps",
"Good10Gbps",
"PerAppVeLTM25Mbps",
"PerAppVeLTM200Mbps"
],
"defaultValue": "Best1Gbps"

{%- elif solution == "waf" %}
"allowedValues": [
"Best25Mbps",
"Best200Mbps",
"Best1Gbps",
"Best5Gbps",
"Best10Gbps",
"AdvancedWaf25Mbps",
"AdvancedWaf200Mbps",
"AdvancedWaf1Gbps",
"PerAppVeAdvancedWaf25Mbps",
"PerAppVeAdvancedWaf200Mbps"
],
"defaultValue": "Best1Gbps"
{%- endif %}
{%- endif %}
{%- if license_type in ("bigiq") %}
{%- if type == "failover" %}
"allowedValues": [
"LTMTwoBootLocations",
"AllTwoBootLocations"
],
"defaultValue": "AllTwoBootLocations"
{%- elif type == "autoscale" and solution == "waf" %}
"allowedValues": [
"AllOneBootLocation",
"AllTwoBootLocations"
],
"defaultValue": "AllTwoBootLocations"
{%- else %}
"allowedValues": [
"LTMOneBootLocation",
"LTMTwoBootLocations",
"AllOneBootLocation",
"AllTwoBootLocations"
],
"defaultValue": "AllTwoBootLocations"
{% endif %}

{%- endif %}
{%- endset %}
{%- set static_image_name -%}
{%- if solution == "ltm" %}
"allowedValues": [
"LTMOneBootLocation",
"LTMTwoBootLocations",
"AllOneBootLocation",
"AllTwoBootLocations"
],
"defaultValue": "AllTwoBootLocations"
{% else %}
"allowedValues": [
"AllOneBootLocation",
"AllTwoBootLocations"
],
"defaultValue": "AllTwoBootLocations"
{% endif %}
{%- endset %}

{% set byol_image_name_array -%}
"15": {
"AllOneBootLocation": "big-all-1slot",
"AllTwoBootLocations": "big-all-2slot",
"LTMOneBootLocation": "big-ltm-1slot",
"LTMTwoBootLocations": "big-ltm-2slot"
},
"14": {
"AllOneBootLocation": "big-all-1slot",
"AllTwoBootLocations": "big-all-2slot",
"LTMOneBootLocation": "big-ltm-1slot",
"LTMTwoBootLocations": "big-ltm-2slot"
},
"13": {
"AllOneBootLocation": "big-all-1slot",
"AllTwoBootLocations": "big-all-2slot",
"LTMOneBootLocation": "big-ltm-1slot",
"LTMTwoBootLocations": "big-ltm-2slot"
},
"12": {
"AllOneBootLocation": "big-all-2slot",
"AllTwoBootLocations": "big-all-2slot",
"LTMOneBootLocation": "big-ltm-2slot",
"LTMTwoBootLocations": "big-ltm-2slot"
},
"latest": {
"AllOneBootLocation": "big-all-2slot",
"AllTwoBootLocations": "big-all-2slot",
"LTMOneBootLocation": "big-ltm-2slot",
"LTMTwoBootLocations": "big-ltm-2slot"
},
"offerPostfix": {
"big-all-1slot": "byol",
"big-all-2slot": "byol",
"big-ltm-1slot": "byol",
"big-ltm-2slot": "byol",
"bigip-virtual-edition-best": "best",
"bigip-virtual-edition-good": "good"
}
{%- endset %}
{% set payg_image_map -%}
"advancedwaf1gbps": {
"offer": "f5-big-ip-advanced-waf",
"sku": "f5-bigip-virtual-edition-1g-waf-hourly"
},
"advancedwaf200mbps": {
"offer": "f5-big-ip-advanced-waf",
"sku": "f5-bigip-virtual-edition-200m-waf-hourly"
},
"advancedwaf25mbps": {
"offer": "f5-big-ip-advanced-waf",
"sku": "f5-bigip-virtual-edition-25m-waf-hourly"
},
"best1gbps": {
"offer": "f5-big-ip-best",
"sku": "f5-bigip-virtual-edition-1g-best-hourly"
},
"best5gbps": {
"offer": "f5-big-ip-best",
"sku": "f5-bigip-virtual-edition-5g-best-hourly"
},
"best10gbps": {
"offer": "f5-big-ip-best",
"sku": "f5-bigip-virtual-edition-10g-best-hourly"
},
"best200mbps": {
"offer": "f5-big-ip-best",
"sku": "f5-bigip-virtual-edition-200m-best-hourly"
},
"best25mbps": {
"offer": "f5-big-ip-best",
"sku": "f5-bigip-virtual-edition-25m-best-hourly"
},
"better1gbps": {
"offer": "f5-big-ip-better",
"sku": "f5-bigip-virtual-edition-1g-better-hourly"
},
"better5gbps": {
"offer": "f5-big-ip-better",
"sku": "f5-bigip-virtual-edition-5g-better-hourly"
},
"better10gbps": {
"offer": "f5-big-ip-better",
"sku": "f5-bigip-virtual-edition-10g-better-hourly"
},
"better200mbps": {
"offer": "f5-big-ip-better",
"sku": "f5-bigip-virtual-edition-200m-better-hourly"
},
"better25mbps": {
"offer": "f5-big-ip-better",
"sku": "f5-bigip-virtual-edition-25m-better-hourly"
},
"good1gbps": {
"offer": "f5-big-ip-good",
"sku": "f5-bigip-virtual-edition-1g-good-hourly"
},
"good5gbps": {
"offer": "f5-big-ip-good",
"sku": "f5-bigip-virtual-edition-5g-good-hourly"
},
"good10gbps": {
"offer": "f5-big-ip-good",
"sku": "f5-bigip-virtual-edition-10g-good-hourly"
},
"good200mbps": {
"offer": "f5-big-ip-good",
"sku": "f5-bigip-virtual-edition-200m-good-hourly"
},
"good25mbps": {
"offer": "f5-big-ip-good",
"sku": "f5-bigip-virtual-edition-25m-good-hourly"
},
"perappveadvancedwaf200mbps": {
"offer": "f5-big-ip-per-app-ve",
"sku": "f5-big-ip-per-app-ve-awf-200m-hourly"
},
"perappveadvancedwaf25mbps": {
"offer": "f5-big-ip-per-app-ve",
"sku": "f5-big-ip-per-app-ve-awf-25m-hourly"
},
"perappveltm200mbps": {
"offer": "f5-big-ip-per-app-ve",
"sku": "f5-big-ip-per-app-ve-ltm-200m-hourly"
},
"perappveltm25mbps": {
"offer": "f5-big-ip-per-app-ve",
"sku": "f5-big-ip-per-app-ve-ltm-25m-hourly"
}
{%- endset %}
{% set version_port_map -%}
"15.1.201000": {
"Port": 8443
},
"14.1.003000": {
"Port": 8443
},
"443": {
"Port": 443
},
"latest": {
"Port": 8443
}
{%- endset %}
{% set premium_instance_type_list -%}
"Standard_DS2",
"Standard_DS3",
"Standard_DS4",
"Standard_DS11",
"Standard_DS12",
"Standard_DS13",
"Standard_DS14",
"Standard_DS2_v2",
"Standard_DS3_v2",
"Standard_DS4_v2",
"Standard_DS5_v2",
"Standard_DS11_v2",
"Standard_DS12_v2",
"Standard_DS13_v2",
"Standard_DS14_v2",
"Standard_DS15_v2",
"Standard_F2S",
"Standard_F4S",
"Standard_F8S",
"Standard_F16S",
"Standard_GS2",
"Standard_GS3",
"Standard_GS4",
"Standard_GS5"
{%- endset %}

{# The following cloud library versions are populated on the fly by the main.py script #}
{% set f5_cloud_libs_tag = f5_cloud_libs_latest_tag -%}

{% set f5_cloud_libs_azure_tag = f5_cloud_libs_azure_latest_tag -%}

{% set f5_cloud_workers_tag = f5_cloud_workers_latest_tag -%}

{% set f5_as3_build = f5_as3_latest_build -%}

{% set f5_as3_tag = f5_as3_latest_tag -%}

{% set content_version = latest_content_version %}

{% set f5_networks_tag = f5_networks_latest_tag %}

{% set sku_to_use -%}
{% if license_type in ('byol', 'bigiq') and type != 'bigiq' -%}
concat('f5-', variables('imageNameSub'),'-byol')
{%- elif type == 'bigiq' -%}
"f5-bigiq-virtual-edition-byol"
{%- else -%}
variables('paygImageMap')[variables('imageNameToLower')]['sku']
{%- endif %}
{%- endset %}
{% set offer_to_use -%}
{% if license_type in ('byol', 'bigiq') and type != 'bigiq' -%}
concat('f5-big-ip-', variables('imageNameArray').offerPostfix[variables('imageNameSub')])
{%- elif type == 'bigiq' -%}
"f5-big-iq"
{%- else -%}
variables('paygImageMap')[variables('imageNameToLower')]['offer']
{%- endif %}
{%- endset %}
{% set byol_image_name_sub -%}
{%- if license_type in ('byol', 'bigiq') -%}
"[variables('imageNameArray')[variables('bigIpMajorVersion')][parameters('imageName')]]"
{%- else -%}
"[variables('imageNameArray')[parameters('bigIpVersion')][parameters('staticImageName')]]"
{%- endif -%}
{%- endset %}

{% set min_allowed_values -%}
{% if type == 'autoscale' %}
{% if product in ('ltm', 'waf') and lb_method in ('via-lb', 'dns') %}
{% if license_type == 'bigiq-payg' %}
[0, 1, 2, 3, 4, 5, 6]
{% else %}
[1, 2, 3, 4, 5, 6]
{% endif %}
{% endif %}
{% endif %}
{%- endset %}

{% set max_allowed_values -%}
{% if type == 'autoscale' %}
{% if product in ('ltm', 'waf') and lb_method in ('via-lb', 'dns') %}
{% if license_type == 'bigiq-payg' %}
[1, 2, 3, 4, 5, 6, 7, 8]
{% else %}
[2, 3, 4, 5, 6, 7, 8]
{% endif %}
{% endif %}
{% endif %}
{%- endset %}


{%set number_of_additional_nics%}
{% if type == 'standalone' and nics == 'n' %}
"allowedValues": [
1,
2,
3,
4,
5
],
"defaultValue": 1,
{% endif %}
{% if type == 'failover' and lb_method == 'api' %}
"allowedValues": [
0,
1,
2,
3,
4,
5
],
"defaultValue": 0,
{% endif %}
{% endset %}

{%set additional_nic_location %}
{% if type == 'standalone' and nics == 'n' %}
"additionalNicLocation": {
"metadata": {
"description": "This parameter specifies where the additional NICs go.  This value must be a semi-colon delimited string of subnets, equal to the number of additional NICs being deployed.  For example, for 2 additional NICs you would use: **subnet01;subnet02**. **Note**: Ensure there are no spaces and the correct number of subnets are provided based on the value selected in **numberOfAdditionalNics**. **Important**: The subnet you provide for each additional NIC **must** be unique."
},
"type": "string"
},
{% endif %}
{% if type == 'failover' and lb_method == 'api' %}
"additionalNicLocation": {
"metadata": {
"description": "This parameter specifies where the additional NICs go.  This value must be a semi-colon delimited string of subnets, equal to the number of additional NICs being deployed.  For example, for 2 additional NICs you would use: **subnet01;subnet02**. **Note**: Ensure there are no spaces and the correct number of subnets are provided based on the value selected in **numberOfAdditionalNics**. **Important**: The subnet you provide for each additional NIC **must** be unique."
},
"type": "string"
},
{% endif %}
{% endset %}


{% set waagent_restart_cmd = ", '; if grep -i \"PUT failed\" /var/log/waagent.log -q; then echo \"Killing waagent exthandler, daemon should restart it\"; pkill -f \"python -u /usr/sbin/waagent -run-exthandlers\"; fi'".replace("\"", "\\\"") %}


{% set bigiq_pwd_delete= " rm -f /config/cloud/.bigIqPasswd;" %}

{% set autoscale_file_uris %}
"[concat('https://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/', variables('f5CloudLibsTag'), '/f5-cloud-libs.tar.gz')]",
"[concat('https://cdn.f5.com/product/cloudsolutions/f5-appsvcs-extension/', variables('f5AS3Tag'), '/', variables('f5AS3Build'))]",
"[concat('https://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-azure/', variables('f5CloudLibsAzureTag'), '/f5-cloud-libs-azure.tar.gz')]"
{% if type == 'autoscale'  and solution =='waf' and lb_method in ('via-lb', 'dns') %}
,"[concat(variables('f5NetworksSolutionScripts'), 'asm-policy.tar.gz')]"
{% endif %}
{% endset %}

{%- set hashed_file_list -%}
${config_loc}f5-cloud-libs.tar.gz f5-appsvcs-3.25.0-3.noarch.rpm
{%- if type == "autoscale" and lb_method in ('via-lb', 'dns') and solution == 'ltm' or type == 'failover' and lb_method == 'api' -%}
{{ " " }}${config_loc}f5-cloud-libs-azure.tar.gz
{%- elif  type == "autoscale" and lb_method in ('via-lb', 'dns') and solution == 'waf' -%}
{{ " " }}${config_loc}f5-cloud-libs-azure.tar.gz asm-policy.tar.gz
{%- endif -%}
{%- if lb_method == 'api' -%}
{{ " " }}{{ f5_cfe_latest_build }}
{%- endif -%}
{%- endset -%}
{%- if type == 'autoscale' or type =='failover' and nics == 'n' -%}
{%- set additional_tar_list = "tar xfz /config/cloud/f5-cloud-libs-azure.tar.gz --warning=no-unknown-keyword -C /config/cloud/azure/node_modules/@f5devcentral\n".replace('\n', '\\n') -%}
{%- endif -%}
{%- set install_cloud_libs = "[concat(variables('singleQuote'), '#!/bin/bash\necho about to execute\nchecks=0\nwhile [ $checks -lt 120 ]; do echo checking mcpd\n/usr/bin/tmsh -a show sys mcp-state field-fmt | grep -q running\nif [ $? == 0 ]; then\necho mcpd ready\nbreak\nfi\necho mcpd not ready yet\nlet checks=checks+1\nsleep 1\ndone\necho loading verifyHash script\n/usr/bin/tmsh load sys config merge file /config/verifyHash\nif [ $? != 0 ]; then\necho cannot validate signature of /config/verifyHash\nexit 1\nfi\necho loaded verifyHash\n\nconfig_loc=\"/config/cloud/\"\nhashed_file_list=\"".replace('\n', '\\n').replace('\"', '\\\"')~hashed_file_list~"\"\nfor file in $hashed_file_list; do\necho \"verifying $file\"\n/usr/bin/tmsh run cli script verifyHash $file\nif [ $? != 0 ]; then\necho \"$file is not valid\"\nexit 1\nfi\necho \"verified $file\"\ndone\necho \"expanding $hashed_file_list\"\ntar xfz /config/cloud/f5-cloud-libs.tar.gz --warning=no-unknown-keyword -C /config/cloud/azure/node_modules/@f5devcentral\n".replace('\n', '\\n').replace('\"', '\\\"')~additional_tar_list~"touch /config/cloud/cloudLibsReady', variables('singleQuote'))]".replace('\n', '\\n').replace('\"', '\\\"') %}

{% set big_iq_pwd_cmd = "/usr/bin/install -m 400 /dev/null /config/cloud/.bigIqPasswd; encrypt_secret ', variables('singleQuote'), parameters('bigIqPassword'), variables('singleQuote'), ' \"/config/cloud/.bigIqPasswd\";".replace('\"', '\\\"') %}

{%- set app_script -%}
{%- if type == "autoscale" and solution == 'waf' -%}
""
{%- elif type =='failover' and lb_method == 'api'  -%}
"IyEvYmluL2Jhc2gKZnVuY3Rpb24gcGFzc3dkKCkgewogIGVjaG8gfCBmNS1yZXN0LW5vZGUgL2NvbmZpZy9jbG91ZC9henVyZS9ub2RlX21vZHVsZXMvQGY1ZGV2Y2VudHJhbC9mNS1jbG91ZC1saWJzL3NjcmlwdHMvZGVjcnlwdERhdGFGcm9tRmlsZS5qcyAtLWRhdGEtZmlsZSAvY29uZmlnL2Nsb3VkLy5wYXNzd2QgfCBhd2sgJ3twcmludCAkMX0nCn0KCndoaWxlIGdldG9wdHMgbzp1OmY6IG9wdGlvbgpkbyBjYXNlICIkb3B0aW9uIiAgaW4KICAgICAgICBvKSBkZWNsYXJhdGlvblVybD0kT1BUQVJHOzsKICAgICAgICB1KSB1c2VyPSRPUFRBUkc7OwogICAgICAgIGYpIGlzQXMzPSRPUFRBUkc7OwogICAgZXNhYwpkb25lCgpkZXBsb3llZD0ibm8iCmZpbGVfbG9jPSIvY29uZmlnL2Nsb3VkL2N1c3RvbV9jb25maWciCmRmbF9tZ210X3BvcnQ9YHRtc2ggbGlzdCBzeXMgaHR0cGQgc3NsLXBvcnQgfCBncmVwIHNzbC1wb3J0IHwgc2VkICdzL3NzbC1wb3J0IC8vO3MvIC8vZydgCnVybF9yZWdleD0iKGh0dHA6XC9cL3xodHRwczpcL1wvKT9bYS16MC05XSsoW1wtXC5dezF9W2EtejAtOV0rKSpcLlthLXpdezIsNX0oOlswLTldezEsNX0pPyhcLy4qKT8kIgoKaWYgW1sgJGRlY2xhcmF0aW9uVXJsID1+ICR1cmxfcmVneCAmJiAkaXNBczMgPX4gImRvX2FzIiBdXTsgdGhlbgogICAgcmVzcG9uc2VfY29kZT0kKC91c3IvYmluL2N1cmwgLXNrIC13ICIle2h0dHBfY29kZX0iICRkZWNsYXJhdGlvblVybCAtbyAkZmlsZV9sb2MpCiAgICBpZiBbWyAkcmVzcG9uc2VfY29kZSA9PSAyMDAgXV07IHRoZW4KICAgICAgICAgZWNobyAiQ3VzdG9tIGNvbmZpZyBkb3dubG9hZCBjb21wbGV0ZTsgY2hlY2tpbmcgZm9yIHZhbGlkIEpTT04uIgogICAgICAgICBjYXQgJGZpbGVfbG9jIHwganEgLmNsYXNzCiAgICAgICAgIGlmIFtbICQ/ID09IDAgXV07IHRoZW4KICAgICAgICAgICAgIHJlc3BvbnNlX2NvZGU9JCgvdXNyL2Jpbi9jdXJsIC1za3Z2dSAkdXNlcjokKHBhc3N3ZCkgLXcgIiV7aHR0cF9jb2RlfSIgLVggUE9TVCAtSCAiQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uIiAtSCAiRXhwZWN0OiIgaHR0cHM6Ly9sb2NhbGhvc3Q6JGRmbF9tZ210X3BvcnQvbWdtdC9zaGFyZWQvYXBwc3Zjcy9kZWNsYXJlIC1kIEAkZmlsZV9sb2MgLW8gL2Rldi9udWxsKQoKICAgICAgICAgICAgIGlmIFtbICRyZXNwb25zZV9jb2RlID09IDIwMCB8fCAkcmVzcG9uc2VfY29kZSA9PSA1MDIgXV07IHRoZW4KICAgICAgICAgICAgICAgICAgZWNobyAiRGVwbG95bWVudCBvZiBhcHBsaWNhdGlvbiBzdWNjZWVkZWQuIgogICAgICAgICAgICAgICAgICBkZXBsb3llZD0ieWVzIgogICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgIGVjaG8gIkZhaWxlZCB0byBkZXBsb3kgYXBwbGljYXRpb247IGNvbnRpbnVpbmcgd2l0aCByZXNwb25zZSBjb2RlICciJHJlc3BvbnNlX2NvZGUiJyIKICAgICAgICAgICAgIGZpCiAgICAgICAgIGVsc2UKICAgICAgICAgICAgIGVjaG8gIkN1c3RvbSBjb25maWcgd2FzIG5vdCB2YWxpZCBKU09OLCBjb250aW51aW5nIgogICAgICAgICBmaQogICAgZWxzZQogICAgICAgIGVjaG8gIkZhaWxlZCB0byBkb3dubG9hZCBjdXN0b20gY29uZmlnOyBjb250aW51aW5nIHdpdGggcmVzcG9uc2UgY29kZSAnIiRyZXNwb25zZV9jb2RlIiciCiAgICBmaQplbHNlCiAgICAgZWNobyAiQ3VzdG9tIGNvbmZpZyB3YXMgbm90IGEgVVJMLCBjb250aW51aW5nLiIKZmkKCmlmIFtbICRkZXBsb3llZCA9PSAibm8iICYmICRkZWNsYXJhdGlvblVybCA9PSAiTk9UX1NQRUNJRklFRCIgJiYgICQyICE9ICdza2lwX2FzMycgXV07IHRoZW4KICAgIGVjaG8gIkFwcGxpY2F0aW9uIGRlcGxveW1lbnQgZmFpbGVkIG9yIGN1c3RvbSBVUkwgd2FzIG5vdCBzcGVjaWZpZWQuIgpmaQoKY2ZlX2ZpbGVfbG9jPS9jb25maWcvY2xvdWQvYXp1cmUvY2ZlLWluaXQuY2ZnCmNmZV9yZXNwb25zZV9jb2RlPSQoL3Vzci9iaW4vY3VybCAtc2t2dnUgJHVzZXI6JChwYXNzd2QpIC13ICIle2h0dHBfY29kZX0iIC1YIFBPU1QgLUggIkNvbnRlbnQtVHlwZTphcHBsaWNhdGlvbi9qc29uIiBodHRwczovL2xvY2FsaG9zdDo0NDMvbWdtdC9zaGFyZWQvY2xvdWQtZmFpbG92ZXIvZGVjbGFyZSAtZCBAJGNmZV9maWxlX2xvYykKCmlmIFtbICRjZmVfcmVzcG9uc2VfY29kZSA9PSAyMDAgfHwgJGNmZV9yZXNwb25zZV9jb2RlID09IDUwMiBdXTsgdGhlbgogICAgZWNobyAiRGVwbG95bWVudCBvZiBDRkUgYXBwbGljYXRpb24gc3VjY2VlZGVkLiIKZWxzZQogICAgZWNobyAiRmFpbGVkIHRvIGRlcGxveSBDRkUgYXBwbGljYXRpb24gd2l0aCByZXNwb25zZSBjb2RlICciJGNmZV9yZXNwb25zZV9jb2RlIiciCmZpCgplY2hvICJEZXBsb3ltZW50IGNvbXBsZXRlLiIKZXhpdA=="
{%- else -%}
"IyEvYmluL2Jhc2gKZnVuY3Rpb24gcGFzc3dkKCkgewogIGVjaG8gfCBmNS1yZXN0LW5vZGUgL2NvbmZpZy9jbG91ZC9henVyZS9ub2RlX21vZHVsZXMvQGY1ZGV2Y2VudHJhbC9mNS1jbG91ZC1saWJzL3NjcmlwdHMvZGVjcnlwdERhdGFGcm9tRmlsZS5qcyAtLWRhdGEtZmlsZSAvY29uZmlnL2Nsb3VkLy5wYXNzd2QgfCBhd2sgJ3twcmludCAkMX0nCn0KCndoaWxlIGdldG9wdHMgbzp1OiBvcHRpb24KZG8gY2FzZSAiJG9wdGlvbiIgIGluCiAgICAgICAgbykgZGVjbGFyYXRpb25Vcmw9JE9QVEFSRzs7CiAgICAgICAgdSkgdXNlcj0kT1BUQVJHOzsKICAgIGVzYWMKZG9uZQoKZGVwbG95ZWQ9Im5vIgpmaWxlX2xvYz0iL2NvbmZpZy9jbG91ZC9jdXN0b21fY29uZmlnIgpkZmxfbWdtdF9wb3J0PWB0bXNoIGxpc3Qgc3lzIGh0dHBkIHNzbC1wb3J0IHwgZ3JlcCBzc2wtcG9ydCB8IHNlZCAncy9zc2wtcG9ydCAvLztzLyAvL2cnYAp1cmxfcmVnZXg9IihodHRwOlwvXC98aHR0cHM6XC9cLyk/W2EtejAtOV0rKFtcLVwuXXsxfVthLXowLTldKykqXC5bYS16XXsyLDV9KDpbMC05XXsxLDV9KT8oXC8uKik/JCIKCmlmIFtbICRkZWNsYXJhdGlvblVybCA9fiAkdXJsX3JlZ2V4IF1dOyB0aGVuCiAgICByZXNwb25zZV9jb2RlPSQoL3Vzci9iaW4vY3VybCAtc2sgLXcgIiV7aHR0cF9jb2RlfSIgJGRlY2xhcmF0aW9uVXJsIC1vICRmaWxlX2xvYykKICAgIGlmIFtbICRyZXNwb25zZV9jb2RlID09IDIwMCBdXTsgdGhlbgogICAgICAgICBlY2hvICJDdXN0b20gY29uZmlnIGRvd25sb2FkIGNvbXBsZXRlOyBjaGVja2luZyBmb3IgdmFsaWQgSlNPTi4iCiAgICAgICAgIGNhdCAkZmlsZV9sb2MgfCBqcSAuY2xhc3MKICAgICAgICAgaWYgW1sgJD8gPT0gMCBdXTsgdGhlbgogICAgICAgICAgICAgcmVzcG9uc2VfY29kZT0kKC91c3IvYmluL2N1cmwgLXNrdnZ1ICR1c2VyOiQocGFzc3dkKSAtdyAiJXtodHRwX2NvZGV9IiAtWCBQT1NUIC1IICJDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24iIC1IICJFeHBlY3Q6IiBodHRwczovL2xvY2FsaG9zdDokZGZsX21nbXRfcG9ydC9tZ210L3NoYXJlZC9hcHBzdmNzL2RlY2xhcmUgLWQgQCRmaWxlX2xvYyAtbyAvZGV2L251bGwpCgogICAgICAgICAgICAgaWYgW1sgJHJlc3BvbnNlX2NvZGUgPT0gMjAwIHx8ICRyZXNwb25zZV9jb2RlID09IDUwMiBdXTsgdGhlbgogICAgICAgICAgICAgICAgICBlY2hvICJEZXBsb3ltZW50IG9mIGFwcGxpY2F0aW9uIHN1Y2NlZWRlZC4iCiAgICAgICAgICAgICAgICAgIGRlcGxveWVkPSJ5ZXMiCiAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgZWNobyAiRmFpbGVkIHRvIGRlcGxveSBhcHBsaWNhdGlvbjsgY29udGludWluZyB3aXRoIHJlc3BvbnNlIGNvZGUgJyIkcmVzcG9uc2VfY29kZSInIgogICAgICAgICAgICAgZmkKICAgICAgICAgZWxzZQogICAgICAgICAgICAgZWNobyAiQ3VzdG9tIGNvbmZpZyB3YXMgbm90IHZhbGlkIEpTT04sIGNvbnRpbnVpbmciCiAgICAgICAgIGZpCiAgICBlbHNlCiAgICAgICAgZWNobyAiRmFpbGVkIHRvIGRvd25sb2FkIGN1c3RvbSBjb25maWc7IGNvbnRpbnVpbmcgd2l0aCByZXNwb25zZSBjb2RlICciJHJlc3BvbnNlX2NvZGUiJyIKICAgIGZpCmVsc2UKICAgICBlY2hvICJDdXN0b20gY29uZmlnIHdhcyBub3QgYSBVUkwsIGNvbnRpbnVpbmcuIgpmaQoKaWYgW1sgJGRlcGxveWVkID09ICJubyIgJiYgJGRlY2xhcmF0aW9uVXJsID09ICJOT1RfU1BFQ0lGSUVEIiBdXTsgdGhlbgogICAgZWNobyAiQXBwbGljYXRpb24gZGVwbG95bWVudCBmYWlsZWQgb3IgY3VzdG9tIFVSTCB3YXMgbm90IHNwZWNpZmllZC4iCmZpCgplY2hvICJEZXBsb3ltZW50IGNvbXBsZXRlLiIKZXhpdA=="
{%- endif -%}
{%- endset -%}
