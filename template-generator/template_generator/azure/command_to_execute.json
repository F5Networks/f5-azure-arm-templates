{% import 'constants.json' as constants with context %}
{% import 'license.json' as license with context %}%}

{%- set ext_mask_cmd = "skip(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, indexOf(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '/')),".replace("\"", "\\\"") %}

{% set int_mask_cmd  = "skip(reference(variables('intSubnetRef'), variables('networkApiVersion')).addressPrefix, indexOf(reference(variables('intSubnetRef'), variables('networkApiVersion')).addressPrefix, '/')),".replace("\"", "\\\"") %}

{%if type in ('standalone', 'failover') and nics in ('2', '3', 'n') %}
    {% set route_add_cmd = " ', variables('routeCmd'), '; echo -e ', variables('routeCmd'), ' >> /config/startup;".replace("\"", "\\\"") %}
{% endif %}
{# Link-local route command, for 2+ nic templates #}
{# Default GW command is different for existing-stack #}
{% set metrics_hash_to_exec = "', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].hashCmd, ';" %}
{% set metrics_cmd_to_exec = "', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].metricsCmd, '" %}
{% set phone_home_cmd_to_exec = "; tmsh modify sys software update auto-phonehome ', variables('allowPhoneHome'), '" %}
{%- set default_gw_cmd -%}
  {%- if stack in ('existing-stack', 'production-stack') -%}
        concat(take(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, add(lastIndexOf(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '.'), 1)), add(int(take(split(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '.')[3], indexOf(split(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '.')[3], '/'))), 1))
  {%- else -%}
variables('tmmRouteGw')
  {%- endif -%}
{%- endset %}
{## Base Start/Post Command to Execute #}
{%- macro post_cmd_to_execute(vm) -%}
        , '; if [[ $? == 0 ]]; then tmsh list sys application service;
  {%- if type == 'failover' and lb_method == 'api' -%}
        {{ " " }}base=', reference(concat(variables('extNicId'), '{{ vm }}')).ipConfigurations[0].properties.privateIPAddress, '; f3=$(echo $base | cut -d. -f1-3); list=$(/usr/bin/curl -s -H Metadata:true \"http://169.254.169.254/metadata/instance/network?api-version=2017-08-01\" | jq -r .interface[].ipv4.ipAddress[].privateIpAddress); for address in $list; do address_base=$(echo $address | cut -d. -f1-3); if [[ $address_base == $f3 && $address != $base ]]; then tmsh create ltm virtual-address $address address $address; fi; done;
  {%- endif -%}
        {{ route_add_cmd }}{{ bigiq_pwd_delete }}
  {%- if license_type == 'bigiq' -%}
        {{ " " }}rm -f /config/cloud/.bigIqPasswd;
  {%- endif -%}
  {%- if type == 'failover' and lb_method =='api' -%}
        {{ " " }}$(nohup bash /config/failover/tgactive &>/dev/null &);
  {%- endif -%}
  {%- if type == 'standalone' -%}
        {{ " " }}bash /config/cloud/deploy_app.sh ', variables('commandArgs'), ' ;
  {%- endif -%}
        {{ " " }}bash /config/customConfig.sh; $(cp_logs); else $(cp_logs); exit 1; fi'{{ constants.waagent_restart_cmd }}
{%- endmacro %}

{%set base_cmd_to_execute -%}
        'function cp_logs() { cd /var/lib/waagent/custom-script/download && cp `ls -r | head -1`/std* /var/log/cloud/azure; cd /var/log/cloud/azure && cat stdout stderr > install.log; }; CLOUD_LIB_DIR=/config/cloud/azure/node_modules/@f5devcentral; mkdir -p $CLOUD_LIB_DIR && cp f5-cloud-libs*.tar.gz* /config/cloud; mkdir -p /var/config/rest/downloads && cp ', variables('f5AS3Build'), ' /var/config/rest/downloads; mkdir -p /var/log/cloud/azure; /usr/bin/install -m 400 /dev/null /config/cloud/.passwd; /usr/bin/setdb provision.extramb 1000; /usr/bin/setdb restjavad.useextramb true; /usr/bin/curl -s -f -u admin: -H \"Content-Type: application/json\" -d ', variables('singleQuote'), '{\"maxMessageBodySize\":134217728} ', variables('singleQuote'), ' -X POST http://localhost:8100/mgmt/shared/server/messaging/settings/8100 | jq .;
  {%- if type == 'failover' and  lb_method =='api' -%}
        {{ " " }} cp ', variables('f5CloudFailoverBuild'), ' /var/config/rest/downloads; /usr/bin/install -m 400 /dev/null /config/cloud/.azCredentials; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh;
  {%- else -%}
     {{ " " }}/usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh;
  {%- endif -%}
        {{" "}}IFS=', variables('singleQuote'), '%', variables('singleQuote'), '; echo -e ', variables('verifyHash'), ' > /config/verifyHash; echo -e ', variables('installCloudLibs'), ' > /config/installCloudLibs.sh; echo -e ', variables('appScript'), ' | /usr/bin/base64 -d > /config/cloud/deploy_app.sh; chmod +x /config/cloud/deploy_app.sh; echo -e ', variables('installCustomConfig'), ' >> /config/customConfig.sh; unset IFS; bash /config/installCloudLibs.sh; source $CLOUD_LIB_DIR/f5-cloud-libs/scripts/util.sh; encrypt_secret ', variables('singleQuote'),
  {%- if type == 'failover' and  lb_method =='api' -%}
  {%- endif -%}
        {{" "}}variables('adminPasswordOrKey'), variables('singleQuote'), ' \"/config/cloud/.passwd\" true; $CLOUD_LIB_DIR/f5-cloud-libs/scripts/createUser.sh --user svc_user --password-file /config/cloud/.passwd --password-encrypted;
        {%- if license_type == 'bigiq' or license_type == 'bigiq-payg' -%}
            {{ " " ~constants.big_iq_pwd_cmd }}
        {%- endif -%}
        {%- if type == 'failover' and lb_method =='api' -%}
          {{" " ~metrics_hash_to_exec}} /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --db dhclient.mgmt:disable --no-reboot --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5CloudFailoverBuild'), ' --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host '
        {%- elif type == 'failover' and nics == '1' -%}
          {{" " ~metrics_hash_to_exec}} /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --no-reboot --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host '
        {%- elif type == 'standalone' and nics == '1' -%}
          {{" " ~metrics_hash_to_exec}} /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --no-reboot --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host '
        {%- else -%}
          {{" " ~metrics_hash_to_exec}} /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --db dhclient.mgmt:disable --no-reboot --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host '
        {%- endif -%}
{%- endset %}


{# ##### Compute/VM Extension Resource(s) ##### #}
{%- macro command_to_execute(vm) -%}
  {%- if type in ('standalone', 'failover') -%}
    {%- if type =='failover' -%}
        {%- if vm == 1 -%}
          {%- set mgmt_subnet_private_ip = "reference(concat(variables('mgmtNicId'), '1')).ipConfigurations[0].properties.privateIPAddress" %}
          {%- set ext_subnet_private_ip = "reference(concat(variables('extNicId'), '1')).ipConfigurations[0].properties.privateIPAddress" %}
          {%- set int_subnet_private_ip = "reference(concat(variables('intNicId'), '1')).ipConfigurations[0].properties.privateIPAddress" %}
        {%- else -%}
          {%- set mgmt_subnet_private_ip = "reference(concat(variables('mgmtNicId'), '0')).ipConfigurations[0].properties.privateIPAddress" %}
          {%- set ext_subnet_private_ip = "reference(concat(variables('extNicId'), '0')).ipConfigurations[0].properties.privateIPAddress" %}
          {%- set int_subnet_private_ip = "reference(concat(variables('intNicId'), '0')).ipConfigurations[0].properties.privateIPAddress" %}
        {%- endif -%}
    {%- else -%}
        {%- set mgmt_subnet_private_ip =  "reference(variables('mgmtNicId')).ipConfigurations[0].properties.privateIPAddress" %}
        {%- set ext_subnet_private_ip =  "reference(variables('extNicId')).ipConfigurations[0].properties.privateIPAddress" %}
        {%- set int_subnet_private_ip =  "reference(variables('intNicId')).ipConfigurations[0].properties.privateIPAddress" %}
    {%- endif -%}

  {%- if type =='standalone' -%}
    {%- set host_name = "concat(variables('instanceName'), '.', variables('location'), '.cloudapp.azure.com')" %}
  {%- elif type == 'failover' -%}
    {%- set remote_host = "reference(concat(variables('mgmtNicId'), '0')).ipConfigurations[0].properties.privateIPAddress" %}
    {%- if nics == '1' -%}
        {%- set config_sync_ip = mgmt_subnet_private_ip %}
        {%- if vm == 0 -%}
            {%- set host_name = "concat(variables('deviceNamePrefix'), 0, '.azuresecurity.com')" %}
        {%- elif vm == 1 -%}
            {%- set host_name = "concat(variables('deviceNamePrefix'), copyindex(1), '.azuresecurity.com')" %}
        {%- endif -%}
    {%- elif nics in  ('3', 'n')  -%}
        {%- set config_sync_ip = int_subnet_private_ip %}
        {%- set host_name ="concat(variables('instanceName'), '"~vm~".', variables('location'), '.cloudapp.azure.com')" %}
    {%- endif -%}
  {%- endif -%}
    [concat({{ base_cmd_to_execute }}, {{ mgmt_subnet_private_ip }}
    {%- if type == 'failover' or type == 'standalone' and nics == '1' -%}
         , ' --port ', variables('bigIpMgmtPort')
    {%- endif %}
    {%- if type  == 'failover' and nics in ('3', 'n') or type == 'standalone' and nics in ('2','3','n') -%}
        , ' --ssl-port ', variables('bigIpMgmtPort')
    {%- endif -%}
         , ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --hostname ', {{ host_name }}, {{ license.license1_command(vm) }} ' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --modules ', parameters('bigIpModules'), '
    {%- if type == 'failover' and nics == '1' -%}
        {{' '}}--db provision.1nicautoconfig:disable
    {%- endif -%}
    {%- if type =='failover' and lb_method == 'api' -%}
      {{' '}}--db config.allow.rfc3927:enable
    {%- endif -%}
    {{' '}}--db tmm.maxremoteloglength:2048{{ metrics_cmd_to_exec }}{{ phone_home_cmd_to_exec }}
    {%- if type == 'standalone' and nics == '1' -%}
      '
    {%- endif -%}
    {%- if type == 'failover' -%}
      ;
    {%- endif -%}
    {%- if nics in ('2','3','n') -%}
        {%- if type == 'standalone' -%}
          ;
        {%- endif -%}
        {{' '}}/usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/network.js --output /var/log/cloud/azure/network.log --wait-for ONBOARD_DONE --host ', {{ mgmt_subnet_private_ip }}, ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --default-gw ', {{ default_gw_cmd }}, ' --vlan name:external,nic:1.1
        {%- if type =='failover' and lb_method == 'api' -%}
        {{' '}}--mgmt-route name:azureMetadata,gw:', concat(take(reference(variables('mgmtSubnetRef'), variables('networkApiVersion')).addressPrefix, add(lastIndexOf(reference(variables('mgmtSubnetRef'), variables('networkApiVersion')).addressPrefix, '.'), 1)), add(int(take(split(reference(variables('mgmtSubnetRef'), variables('networkApiVersion')).addressPrefix, '.')[3], indexOf(split(reference(variables('mgmtSubnetRef'), variables('networkApiVersion')).addressPrefix, '.')[3], '/'))), 1)) ,',network:169.254.169.254/32
        {%- endif -%}
        {%- if nics in ('3','n') -%}
            {{ ' ' }}--vlan name:internal,nic:1.2
            {%- if nics == 'n' -%}
            {{" "}}', variables('netCmd'), '
            {%- endif -%}
        {%- endif -%}
        {{" "}}--self-ip name:self_2nic,address:', {{ ext_subnet_private_ip }},
        {%- if stack in ('existing-stack', 'production-stack') and type in ('standalone', 'failover') and nics in ('2','3', 'n') -%}
        {{" "~ext_mask_cmd }}{% endif %} ',vlan:external
    {%- endif -%}
    {%- if nics in ('3','n') -%}
        {{" "}}--self-ip name:self_3nic,address:', {{ int_subnet_private_ip }},
        {%- if stack in ('existing-stack', 'production-stack') and type in ('standalone', 'failover') and nics in ('3', 'n') -%}
        {{" "~int_mask_cmd}}{% endif %} ',vlan:internal
    {%- endif -%}
    {%- if (type == 'standalone' or type == 'failover') and nics in ('2', '3', 'n') -%}
        {{" "}}--log-level info
        {%- if type == 'standalone' -%}
          '
        {%- endif -%}
        {%- if type == 'failover' and nics == '3' -%}
            ; ', if(equals(parameters('enableNetworkFailover'), 'Yes'), concat('tmsh modify cm device ', concat(variables('instanceName'), '{{ vm }}.', variables('location'), '.cloudapp.azure.com'), ' unicast-address { { ip ', {{ int_subnet_private_ip }}, ' port 1026 } } mirror-ip ', {{ int_subnet_private_ip }}), concat('tmsh modify cm device ', concat(variables('instanceName'), '{{ vm }}.', variables('location'), '.cloudapp.azure.com'), ' unicast-address none')), ';
        {%- endif -%}
        {%- if type == 'failover' and nics == 'n' -%}
            ; tmsh modify cm device ', concat(variables('instanceName'), '{{ vm }}.', variables('location'), '.cloudapp.azure.com'), ' unicast-address { { ip ', {{ int_subnet_private_ip }}, ' port 1026 } } mirror-ip ', {{ int_subnet_private_ip }}, '; ', variables('failoverCmdArray')[variables('bigIpMajorVersion')], ';
        {%- endif -%}
    {%-endif %}
 {%- endif %}
 {%- if type == 'failover' -%}
            {{" "}}/usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/cluster.js --output /var/log/cloud/azure/cluster.log --log-level info --delete-local-creds --host ', {{ mgmt_subnet_private_ip }}, ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --config-sync-ip ', {{ config_sync_ip }}
        {%- if vm == 0 -%}
          {%- if lb_method == 'api' -%}
            , ' --create-group --device-group Sync --sync-type sync-failover --device ', {{ host_name }}, ' {% if nics in ('3', 'n') %}--network-failover{% endif %} --auto-sync --save-on-auto-sync; echo ', string(variables('cloudFailoverInitConfig')), ' >> /config/cloud/azure/cfe-init.cfg; bash /config/cloud/deploy_app.sh ', variables('commandArgs'), ' -f do_as3 '
          {%- else -%}
            , ' --create-group --device-group Sync --sync-type sync-failover --device ', {{ host_name }}, ' {% if nics in ('3', 'n') %}--network-failover{% endif %} --auto-sync --save-on-auto-sync; bash /config/cloud/deploy_app.sh ', variables('commandArgs')
          {%- endif -%}
{%- elif vm == 1 -%}
          {%- if lb_method == 'api' -%}
              , ' --join-group --device-group Sync --sync --remote-host ', {{ remote_host }}, ' --remote-user svc_user --remote-password-url file:///config/cloud/.passwd; echo ', string(variables('cloudFailoverInitConfig')), ' >> /config/cloud/azure/cfe-init.cfg; bash /config/cloud/deploy_app.sh ', variables('commandArgs'), ' -f skip_as3 '
          {%- else -%}
              , ' --join-group --device-group Sync --sync --remote-host ', {{ remote_host }}, ' --remote-user svc_user --remote-password-url file:///config/cloud/.passwd'
          {%- endif -%}
{%- endif -%}
{%- endif -%}
{{ post_cmd_to_execute(vm) }})]
{%- endmacro %}
