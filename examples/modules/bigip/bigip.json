{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "9.0.0.0",
  "parameters": {
    "adminUsername": {
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Admin username applied to big-ip Virtual Machine."
      },
      "type": "string"
    },
    "appInsights": {
      "defaultValue": "",
      "metadata": {
        "description": "Enter the name you wish to use to create an Application Insights component. Leave default if you do not wish to create one."
      },
      "type": "string"
    },
    "cpuMetricName": {
      "defaultValue": "Percentage CPU",
      "metadata": {
        "description": "Valid classic compute metric, default is for host cpu. See https://docs.microsoft.com/en-us/azure/azure-monitor/platform/metrics-supported for supported values. Required when customAutoscaleRules parameter not used."
      },
      "type": "string"
    },
    "customAutoscaleRules": {
      "defaultValue": [],
      "metadata": {
        "description": "Leave default to create azure native CPU and throughput metric triggers. Enter an array of appropriate json to use custom triggers. See https://docs.microsoft.com/en-us/azure/templates/microsoft.insights/autoscalesettings for valid json. **Note, when using custom triggers, parameters used to collect metric thresholds are not used."
      },
      "type": "array"
    },
    "customEmail": {
      "defaultValue": [],
      "metadata": {
        "description": "Enter string array of email addresses to be notified when scale up or scale down occurs. Example: ['myemail@email.com','meyemail2@email.com']."
      },
      "type": "array"
    },
    "dnsLabel": {
      "defaultValue": "appDns",
      "metadata": {
        "description": "Unique DNS Name for the Public IP address used to access the Virtual Machine."
      },
      "type": "string"
    },
    "image": {
      "defaultValue": "f5-networks:f5-big-ip-best:f5-bigip-virtual-edition-25m-best-hourly:15.1.002000",
      "metadata": {
        "description": "2 formats accepted. URN of the image to use in Azure marketplace or id of custom image. Example URN value: f5-networks:f5-big-ip-byol:f5-big-ltm-2slot-byol:15.1.002000. You can find the URNs of F5 marketplace images in the README for this template or by running the command: az vm image list --output yaml --publisher f5-networks --all. See https://clouddocs.f5.com/cloud/public/v1/azure/Azure_download.html for information on creating custom bigip image."
      },
      "type": "string"
    },
    "inboundMgmtNatPoolID": {
      "defaultValue": "",
      "metadata": {
        "description": "Nat pool ID used for big-ip management gui connections. Leave default if you do not wish to use natpools or are using public ip."
      },
      "type": "string"
    },
    "inboundSshNatPoolID": {
      "defaultValue": "",
      "metadata": {
        "description": "Nat pool ID used for ssh connections to big-ip. Leave default if you do not wish to use natpools or are using public ip."
      },
      "type": "string"
    },
    "instanceHealthProbeID": {
      "defaultValue": "",
      "metadata": {
        "description": "Enter the resource ID of the probe that you wish to use to determine instance health when performing a rolling upgrade of scale set instances. Use the default value if you are using a manual upgrade policy. Note: The probe must be associated with a load balancing rule."
      },
      "type": "string"
    },
    "instanceType": {
      "defaultValue": "Standard_DS2_v2",
      "metadata": {
        "description": "Enter valid instance type."
      },
      "type": "string"
    },
    "loadBalancerBackendAddressPoolsArray": {
      "defaultValue": [],
      "metadata": {
        "description": "Array of pools where big-ip instances are to be added."
      },
      "type": "array"
    },
    "nsgID": {
      "defaultValue": "",
      "metadata": {
        "description": "Enter security group id to use. Use default if you do not wish to apply an NSG policy."
      },
      "type": "string"
    },
    "provisionPublicIP": {
      "defaultValue": {},
      "metadata": {
        "description": "Enter public ip json configuration to attach public ip to instances. See https://docs.microsoft.com/en-us/azure/templates/microsoft.compute/2019-07-01/virtualmachinescalesets for supported values. Leave default if using natpool, or not using public ip's on instances."
      },
      "type": "object"
    },
    "roleDefinitionId": {
      "defaultValue": "",
      "metadata": {
        "description": "Enter a role definition id you wish to add to system managed identity. Leave default if system managed identity is not used."
      },
      "type": "string"
    },
    "runtimeConfig": {
      "metadata": {
        "description": "Url to bigip-runtime-init configuration file or json string to use for configuration file."
      },
      "type": "string"
    },
    "scaleInCpuThreshold": {
      "defaultValue": 20,
      "maxValue": 100,
      "metadata": {
        "description": "The percentage of CPU utilization that should trigger a scale in event. Required when customAutoscaleRules parameter not used."
      },
      "minValue": 1,
      "type": "int"
    },
    "scaleInThroughputThreshold": {
      "defaultValue": 10000000,
      "metadata": {
        "description": "The amount of throughput (**bytes**) that should trigger a scale in event. Note: The default value is equal to 10 MB. Required when customAutoscaleRules parameter not used."
      },
      "type": "int"
    },
    "scaleInTimeWindow": {
      "defaultValue": 10,
      "metadata": {
        "description": "The time window required to trigger a scale in event. This is used to determine the amount of time needed for a threshold to be breached, as well as to prevent excessive scaling events (flapping). **Note:** Allowed values are 1-60 (minutes). Required when customAutoscaleRules parameter not used."
      },
      "minValue": 1,
      "type": "int"
    },
    "scaleOutCpuThreshold": {
      "defaultValue": 80,
      "maxValue": 100,
      "metadata": {
        "description": "The percentage of CPU utilization that should trigger a scale out event. Required when customAutoscaleRules parameter not used."
      },
      "minValue": 1,
      "type": "int"
    },
    "scaleOutThroughputThreshold": {
      "defaultValue": 20000000,
      "metadata": {
        "description": "The amount of throughput (**bytes**) that should trigger a scale out event. Note: The default value is equal to 20 MB. Required when customAutoscaleRules parameter not used."
      },
      "type": "int"
    },
    "scaleOutTimeWindow": {
      "defaultValue": 10,
      "metadata": {
        "description": "The time window required to trigger a scale out event. This is used to determine the amount of time needed for a threshold to be breached, as well as to prevent excessive scaling events (flapping). **Note:** Allowed values are 1-60 (minutes). Required when customAutoscaleRules parameter not used."
      },
      "minValue": 1,
      "type": "int"
    },
    "sshKey": {
      "metadata": {
        "description": "Supply ssh public key you wish to use to connect to big-ip."
      },
      "type": "string"
    },
    "subnetId": {
      "metadata": {
        "description": "Enter subnet id to use."
      },
      "type": "string"
    },
    "tagValues": {
      "defaultValue": {
        "application": "APP",
        "cost": "COST",
        "environment": "ENV",
        "group": "GROUP",
        "owner": "OWNER"
      },
      "metadata": {
        "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
      },
      "type": "object"
    },
    "throughputMetricName": {
      "defaultValue": "Network In",
      "metadata": {
        "description": "Valid classic compute metric, default is for aggregate interface traffic. See https://docs.microsoft.com/en-us/azure/azure-monitor/platform/metrics-supported for supported values. Required when customAutoscaleRules parameter not used."
      },
      "type": "string"
    },
    "updateTag": {
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "Creates a unique timestamp for this deployment. Do not modify this value."
      },
      "type": "string"
    },
    "useAvailabilityZones": {
      "defaultValue": "Yes",
      "metadata": {
        "description": "This deployment can deploy resources into Azure Availability Zones (if the region supports it).  If that is not desired the input should be set 'No'. If the region does not support availability zones the input should be set to No."
      },
      "type": "bool"
    },
    "userAssignManagedIdentity": {
      "defaultValue": "",
      "metadata": {
        "description": "Enter user assigned management identity Id to be associated to vmss. Leave default if not used."
      },
      "type": "string"
    },
    "vmScaleSetMaxCount": {
      "defaultValue": 4,
      "metadata": {
        "description": "The maximum number of BIG-IP VEs that can be deployed into the VM Scale Set."
      },
      "type": "int"
    },
    "vmScaleSetMinCount": {
      "defaultValue": 2,
      "metadata": {
        "description": "The minimum (and default) number of BIG-IP VEs that will be deployed into the VM Scale Set."
      },
      "type": "int"
    },
    "vmssName": {
      "defaultValue": "bigip-vmss",
      "metadata": {
        "description": "Name to use for Virtual Machine Scale Set."
      },
      "type": "string"
    }
  },
  "variables": {
    "appInsightsApiVersion": "2015-04-01",
    "appInsightsComponentsApiVersion": "2015-05-01",
    "appInsightsName": "[if(empty(parameters('appInsights')), 'NOT_USED', parameters('appInsights'))]",
    "autoscaleRules": [
      {
        "metricTrigger": {
          "metricName": "[parameters('cpuMetricName')]",
          "metricNamespace": "",
          "metricResourceUri": "[variables('metricResourceUri')]",
          "operator": "GreaterThan",
          "statistic": "Average",
          "threshold": "[parameters('scaleOutCpuThreshold')]",
          "timeAggregation": "Average",
          "timeGrain": "PT1M",
          "timeWindow": "[variables('scaleOutTimeWindow')]"
        },
        "scaleAction": {
          "cooldown": "PT1M",
          "direction": "Increase",
          "type": "ChangeCount",
          "value": "1"
        }
      },
      {
        "metricTrigger": {
          "metricName": "[parameters('cpuMetricName')]",
          "metricNamespace": "",
          "metricResourceUri": "[variables('metricResourceUri')]",
          "operator": "LessThan",
          "statistic": "Average",
          "threshold": "[parameters('scaleInCpuThreshold')]",
          "timeAggregation": "Average",
          "timeGrain": "PT1M",
          "timeWindow": "[variables('scaleInTimeWindow')]"
        },
        "scaleAction": {
          "cooldown": "PT1M",
          "direction": "Decrease",
          "type": "ChangeCount",
          "value": "1"
        }
      },
      {
        "metricTrigger": {
          "metricName": "[parameters('throughputMetricName')]",
          "metricNamespace": "",
          "metricResourceUri": "[variables('metricResourceUri')]",
          "operator": "GreaterThan",
          "statistic": "Average",
          "threshold": "[parameters('scaleOutThroughputThreshold')]",
          "timeAggregation": "Average",
          "timeGrain": "PT1M",
          "timeWindow": "[variables('scaleOutTimeWindow')]"
        },
        "scaleAction": {
          "cooldown": "PT1M",
          "direction": "Increase",
          "type": "ChangeCount",
          "value": "1"
        }
      },
      {
        "metricTrigger": {
          "metricName": "[parameters('throughputMetricName')]",
          "metricNamespace": "",
          "metricResourceUri": "[variables('metricResourceUri')]",
          "operator": "LessThan",
          "statistic": "Average",
          "threshold": "[parameters('scaleInThroughputThreshold')]",
          "timeAggregation": "Average",
          "timeGrain": "PT1M",
          "timeWindow": "[variables('scaleInTimeWindow')]"
        },
        "scaleAction": {
          "cooldown": "PT1M",
          "direction": "Decrease",
          "type": "ChangeCount",
          "value": "1"
        }
      }
    ],
    "computeApiVersion": "2019-12-01",
    "deploymentScript": "[resourceId('Microsoft.Resources/deploymentScripts', variables('deploymentScriptName'))]",
    "deploymentScriptName": "[concat(variables('appInsightsName'), '-metric-stub')]",
    "extSettingsRef": {
      "commandToExecute": "[concat('mkdir -p /config/cloud; mkdir -p /var/log/cloud/azure; echo -e ', variables('singleQuote'), parameters('runtimeConfig'), variables('singleQuote'), ' > /config/cloud/onboard_config.yaml; cd /var/log/cloud/azure && cat stdout stderr > /var/log/cloud/azure/install.log; sleep 30; curl -L ', variables('runtimeConfigUrl'), ' -o ', variables('runtimeConfigPackage'), '; bash ', variables('runtimeConfigPackage'), ' -- ', variables('singleQuote'), '--cloud azure', variables('singleQuote'), ' 2>&1 | tee -a /var/log/cloud/azure/install.log; f5-bigip-runtime-init -c /config/cloud/onboard_config.yaml 2>&1')]"
    },
    "extSettingsRefUris": {
      "commandToExecute": "[concat('mkdir -p /config/cloud; mkdir -p /var/log/cloud/azure; cd /var/lib/waagent/custom-script/download && cp $(ls -v | tail -n1)/std* /var/log/cloud/azure; cp $(ls -v | tail -n1)/', variables('runtimeConfigName'), ' /config/cloud/onboard_config.yaml; cd /var/log/cloud/azure && cat stdout stderr > /var/log/cloud/azure/install.log; sleep 30; curl -L ', variables('runtimeConfigUrl'), ' -o ', variables('runtimeConfigPackage'), '; bash ', variables('runtimeConfigPackage'), ' -- ', variables('singleQuote'), '--cloud azure', variables('singleQuote'), ' 2>&1 | tee -a /var/log/cloud/azure/install.log; f5-bigip-runtime-init -c /config/cloud/onboard_config.yaml 2>&1')]",
      "fileUris": [
        "[parameters('runtimeConfig')]"
      ]
    },
    "functionAppName": "[concat(parameters('dnsLabel'), '-function')]",
    "healthProbe": {
      "id": "[parameters('instanceHealthProbeID')]"
    },
    "identity": "[if(empty(parameters('userAssignManagedIdentity')), variables('identitySys'), variables('identitySysUser'))]",
    "identitySys": {
      "type": "SystemAssigned"
    },
    "identitySysUser": {
      "type": "[if(empty(parameters('roleDefinitionId')), 'UserAssigned', 'SystemAssigned, UserAssigned')]",
      "userAssignedIdentities": {
        "[parameters('userAssignManagedIdentity')]": {}
      }
    },
    "image": "[if(variables('useCustomImage'), parameters('image'), split(parameters('image'), ':'))]",
    "imagePlan": {
      "name": "[variables('skuToUse')]",
      "product": "[variables('offerToUse')]",
      "publisher": "f5-networks"
    },
    "imageReference": {
      "offer": "[variables('offerToUse')]",
      "publisher": "f5-networks",
      "sku": "[variables('skuToUse')]",
      "version": "[variables('versionToUse')]"
    },
    "inboundMgmtNatPool": [
      {
        "id": "[parameters('inboundMgmtNatPoolID')]"
      }
    ],
    "inboundSshNatPool": [
      {
        "id": "[parameters('inboundSshNatPoolID')]"
      }
    ],
    "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', parameters('vmssName'))]",
    "networkSecurityGroup": {
      "id": "[parameters('nsgID')]"
    },
    "offerToUse": "[if(variables('useCustomImage'), json('null'), variables('image')[1])]",
    "roleAssignmentsApiVersion": "2017-09-01",
    "rollingUpgrade": "[not(empty(parameters('instanceHealthProbeID')))]",
    "runtimeConfig": "[contains(parameters('runtimeConfig'), '{')]",
    "runtimeConfigName": "[last(split(parameters('runtimeConfig'), '/'))]",
    "runtimeConfigUrl": "https://cdn.f5.com/product/cloudsolutions/f5-bigip-runtime-init/v1.0.0/dist/f5-bigip-runtime-init-1.0.0-1.gz.run",
    "runtimeConfigPackage": "[last(split(variables('runtimeConfigUrl'), '/'))]",
    "scaleInTimeWindow": "[concat('PT', parameters('scaleInTimeWindow'), 'M')]",
    "scaleOutTimeWindow": "[concat('PT', parameters('scaleOutTimeWindow'), 'M')]",
    "singleQuote": "'",
    "skuToUse": "[if(variables('useCustomImage'), json('null'), variables('image')[2])]",
    "storageProfileArray": {
      "customImage": {
        "imageReference": {
          "id": "[variables('image')]"
        }
      },
      "platformImage": {
        "imageReference": "[variables('imageReference')]",
        "osDisk": {
          "createOption": "FromImage"
        }
      }
    },
    "upgradePolicyManual": {
      "mode": "Manual"
    },
    "upgradePolicyRolling": {
      "mode": "Rolling",
      "rollingUpgradePolicy": {
        "maxBatchInstancePercent": 20,
        "maxUnhealthyInstancePercent": 20,
        "maxUnhealthyUpgradedInstancePercent": 20,
        "pauseTimeBetweenBatches": "PT0S"
      }
    },
    "useCustomImage": "[contains(tolower(parameters('image')), 'microsoft.compute')]",
    "useInboundMgmtNatPool": "[if(contains(tolower(parameters('inboundMgmtNatPoolID')), 'inboundnatpools'), variables('inboundMgmtNatPool'), parameters('inboundMgmtNatPoolID'))]",
    "useInboundSshNatPool": "[if(contains(tolower(parameters('inboundSshNatPoolID')), 'inboundnatpools'), variables('inboundSshNatPool'), parameters('inboundSshNatPoolID'))]",
    "versionToUse": "[if(variables('useCustomImage'), json('null'), variables('image')[3])]",
    "vmssId": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('vmssName'))]"
  },
  "resources": [
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[variables('deploymentScript')]"
      ],
      "identity": "[if(and(empty(parameters('userAssignManagedIdentity')), empty(parameters('roleDefinitionId'))), json('null'), variables('identity'))]",
      "location": "[resourceGroup().location]",
      "name": "[parameters('vmssName')]",
      "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]",
      "properties": {
        "overprovision": false,
        "upgradePolicy": "[if(variables('rollingUpgrade'), variables('upgradePolicyRolling'), variables('upgradePolicyManual'))]",
        "virtualMachineProfile": {
          "extensionProfile": {
            "extensions": [
              {
                "name": "onboarder",
                "properties": {
                  "autoUpgradeMinorVersion": true,
                  "forceUpdateTag": "[parameters('updateTag')]",
                  "publisher": "Microsoft.Azure.Extensions",
                  "settings": "[if(variables('runtimeConfig'), variables('extSettingsRef'), variables('extSettingsRefUris'))]",
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0"
                }
              }
            ]
          },
          "networkProfile": {
            "healthProbe": "[if(variables('rollingUpgrade'), variables('healthProbe'), json('null'))]",
            "networkInterfaceConfigurations": [
              {
                "name": "nic1",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "ipconfig1",
                      "properties": {
                        "loadBalancerBackendAddressPools": "[parameters('loadBalancerBackendAddressPoolsArray')]",
                        "loadBalancerInboundNatPools": "[if(and(empty(variables('useInboundMgmtNatPool')), empty(variables('useInboundSshNatPool'))), json('null'), union(variables('useInboundMgmtNatPool'), variables('useInboundSshNatPool')))]",
                        "publicIpAddressConfiguration": "[if(empty(parameters('provisionPublicIP')), json('null'), parameters('provisionPublicIP'))]",
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      }
                    }
                  ],
                  "networkSecurityGroup": "[if(empty(parameters('nsgID')), json('null'), variables('networkSecurityGroup'))]",
                  "primary": true
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[parameters('adminUsername')]",
            "computerNamePrefix": "[parameters('vmssName')]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshKey')]",
                    "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
                  }
                ]
              }
            }
          },
          "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
        }
      },
      "sku": {
        "capacity": "[parameters('vmScaleSetMinCount')]",
        "name": "[parameters('instanceType')]",
        "tier": "Standard"
      },
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "zones": "[if(parameters('useAvailabilityZones'), createArray(1, 2, 3), json('null'))]"
    },
    {
      "apiVersion": "[variables('appInsightsApiVersion')]",
      "dependsOn": [
        "[variables('vmssId')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(parameters('dnsLabel'), '-autoscaleconfig')]",
      "properties": {
        "enabled": true,
        "name": "[concat(parameters('dnsLabel'), '-autoscaleconfig')]",
        "notifications": [
          {
            "email": {
              "customEmails": "[parameters('customEmail')]",
              "sendToSubscriptionAdministrator": false,
              "sendToSubscriptionCoAdministrators": false
            },
            "operation": "Scale"
          }
        ],
        "profiles": [
          {
            "capacity": {
              "default": "[parameters('vmScaleSetMinCount')]",
              "maximum": "[parameters('vmScaleSetMaxCount')]",
              "minimum": "[parameters('vmScaleSetMinCount')]"
            },
            "name": "Profile1",
            "rules": "[if(empty(parameters('customAutoscaleRules')), variables('autoscaleRules'), parameters('customAutoscaleRules'))]"
          }
        ],
        "targetResourceUri": "[variables('vmssId')]"
      },
      "type": "Microsoft.Insights/autoscaleSettings"
    },
    {
      "apiVersion": "[variables('appInsightsComponentsApiVersion')]",
      "condition": "[not(equals(variables('appInsightsName'), 'NOT_USED'))]",
      "kind": "other",
      "location": "[resourceGroup().location]",
      "name": "[variables('appInsightsName')]",
      "properties": {
        "ApplicationId": "[variables('appInsightsName')]",
        "Application_Type": "other"
      },
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "type": "Microsoft.Insights/components"
    },
    {
      "apiVersion": "[variables('roleAssignmentsApiVersion')]",
      "condition": "[not(empty(parameters('roleDefinitionId')))]",
      "dependsOn": [
        "[variables('vmssId')]"
      ],
      "name": "[guid(resourceGroup().id, 'roleId')]",
      "properties": {
        "principalId": "[reference(variables('vmssId'), variables('computeApiVersion'), 'Full').identity.principalId]",
        "roleDefinitionId": "[parameters('roleDefinitionId')]",
        "scope": "[resourceGroup().id]"
      },
      "type": "Microsoft.Authorization/roleAssignments"
    },
    {
      "name": "[variables('deploymentScriptName')]",
      "condition": "[and(not(equals(variables('appInsightsName'), 'NOT_USED')), not(empty(parameters('customAutoscaleRules'))))]",
      "dependsOn": [
        "[variables('appInsightsName')]"
      ],
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2019-10-01-preview",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[parameters('userAssignManagedIdentity')]": {}
        }
      },
      "location": "[resourceGroup().location]",
      "kind": "AzureCLI",
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "properties": {
        "AzCliVersion": "2.0.80",
        "timeout": "PT30M",
        "environmentVariables": [
          {
            "name": "INSTRUMENTATION_KEY",
            "secureValue": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), variables('appInsightsComponentsApiVersion')).InstrumentationKey]"
          }
        ],
        "scriptContent": "NOW=$(date); METRICS=(\"F5_system_cpu\" \"F5_system_tmmCpu\" \"F5_system_memory\" \"F5_system_tmmMemory\" \"F5_system_networkInterfaces_mgmt_counters.bitsIn\" \"F5_system_networkInterfaces_1.0_counters.bitsIn\" \"F5_system_networkInterfaces_mgmt_counters.bitsOut\" \"F5_system_networkInterfaces_1.0_counters.bitsOut\" \"F5_system_tmmTraffic_clientSideTraffic.bitsIn\" \"F5_system_tmmTraffic_clientSideTraffic.bitsOut\" \"F5_system_tmmTraffic_serverSideTraffic.bitsIn\" \"F5_system_tmmTraffic_serverSideTraffic.bitsOut\"); for METRIC in \"${METRICS[@]}\"; do curl -d '{\"name\":\"MetricData\",\"time\":\"'\"${NOW}\"'\",\"iKey\":\"'\"${INSTRUMENTATION_KEY}\"'\",\"data\":{\"baseType\":\"MetricData\",\"baseData\":{\"metrics\":[{\"name\":\"'\"${METRIC}\"'\",\"value\":0,\"count\":0}]}}}' https://dc.services.visualstudio.com/v2/track; sleep 2; done",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D"
      }
    }
  ],
  "outputs": {
    "appInsightsComponentID": {
      "condition": "[not(equals(variables('appInsightsName'), 'NOT_USED'))]",
      "type": "string",
      "value": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/microsoft.insights/components/', parameters('appInsights'))]"
    },
    "appInsightsInstrumentationKey": {
      "condition": "[not(equals(variables('appInsightsName'), 'NOT_USED'))]",
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), variables('appInsightsComponentsApiVersion')).InstrumentationKey]"
    },
    "roleAssignmentID": {
      "condition": "[not(empty(parameters('roleDefinitionId')))]",
      "type": "string",
      "value": "[concat('/subscriptions/',subscription().subscriptionId, '/resourcegroups/',  resourceGroup().name, '/providers/Microsoft.Authorization/roleAssignments/', guid(resourceGroup().id, 'roleId'))]"
    },
    "autoscaleSettingsID": {
      "type": "string",
      "value": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/microsoft.insights/autoscalesettings/', concat(parameters('dnsLabel'), '-autoscaleconfig'))]"
    },
    "vmssID": {
      "type": "string",
      "value": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', parameters('vmssName'))]"
    }
  }
}
